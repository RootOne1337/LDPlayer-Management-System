#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤.
"""

import sys
import subprocess
from pathlib import Path

root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

def demo_emulator_management():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏."""
    print("üéÆ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –≠–ú–£–õ–Ø–¢–û–†–û–í")
    print("=" * 70)
    
    try:
        from src.core.config import WorkstationConfig
        from src.remote.workstation import WorkstationManager
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = WorkstationConfig(
            id="local",
            name="–õ–æ–∫–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
            ip_address="127.0.0.1",
            username="local",
            password="",
            ldplayer_path=r"C:\LDPlayer\LDPlayer9",
            ldconsole_path=r"C:\LDPlayer\LDPlayer9\ldconsole.exe"
        )
        
        manager = WorkstationManager(config)
        
        # –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞
        def local_run_command(command, args=None):
            args = args or []
            result = subprocess.run(
                [command] + args,
                capture_output=True,
                text=True,
                timeout=120
            )
            return result.returncode, result.stdout, result.stderr
        
        manager.run_command = local_run_command
        
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≥–æ—Ç–æ–≤\n")
        
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —ç–º—É–ª—è—Ç–æ—Ä—ã
        print("üìã –¢–ï–ö–£–©–ò–ï –≠–ú–£–õ–Ø–¢–û–†–´:")
        print("-" * 70)
        emulators = manager.get_emulators_list()
        for emu in emulators:
            print(f"   {emu.name} - {emu.status.value}")
        
        # –ü–†–ò–ú–ï–† 1: –°–æ–∑–¥–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        print(f"\n{'=' * 70}")
        print("–ü–†–ò–ú–ï–† 1: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print(f"{'=' * 70}\n")
        
        new_name = "test_configured"
        
        print(f"–°–æ–∑–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{new_name}' —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
        
        success, msg = manager.create_emulator(
            new_name,
            config={
                'resolution': '1920,1080,240',
                'cpu': 4,
                'memory': 4096
            }
        )
        
        print(f"   {'‚úÖ' if success else '‚ùå'} {msg}")
        
        # –ü–†–ò–ú–ï–† 2: –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞
        print(f"\n{'=' * 70}")
        print("–ü–†–ò–ú–ï–† 2: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ 'nifilim'")
        print(f"{'=' * 70}\n")
        
        if any(emu.name == 'nifilim' for emu in emulators):
            print("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
            
            success, msg = manager.modify_emulator('nifilim', {
                'cpu': 4,
                'memory': 8192,
                'resolution': '1920,1080,320'
            })
            
            print(f"   {'‚úÖ' if success else '‚ùå'} {msg}")
            
            print("\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
            
            success, msg = manager.modify_emulator('nifilim', {
                'manufacturer': 'samsung',
                'model': 'SM-G960F',
                'imei': 'auto',
                'mac': 'auto'
            })
            
            print(f"   {'‚úÖ' if success else '‚ùå'} {msg}")
            
            print("\n–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
            
            success, msg = manager.modify_emulator('nifilim', {
                'root': 1,
                'autorotate': 0,
                'lockwindow': 0
            })
            
            print(f"   {'‚úÖ' if success else '‚ùå'} {msg}")
        
        # –ü–†–ò–ú–ï–† 3: –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        print(f"\n{'=' * 70}")
        print("–ü–†–ò–ú–ï–† 3: –°–æ–∑–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏")
        print(f"{'=' * 70}\n")
        
        profiles = [
            {
                'name': 'samsung_s10',
                'config': {
                    'resolution': '1440,2960,560',
                    'cpu': 4,
                    'memory': 6144
                },
                'identity': {
                    'manufacturer': 'samsung',
                    'model': 'SM-G973F',
                    'imei': 'auto',
                    'mac': 'auto'
                }
            },
            {
                'name': 'xiaomi_mi9',
                'config': {
                    'resolution': '1080,2340,440',
                    'cpu': 4,
                    'memory': 4096
                },
                'identity': {
                    'manufacturer': 'xiaomi',
                    'model': 'MI 9',
                    'imei': 'auto',
                    'mac': 'auto'
                }
            }
        ]
        
        for profile in profiles:
            print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è: {profile['name']}")
            
            # –°–æ–∑–¥–∞—Ç—å —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            success, msg = manager.create_emulator(
                profile['name'],
                config=profile['config']
            )
            
            if success:
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω")
                
                # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                success2, msg2 = manager.modify_emulator(
                    profile['name'],
                    profile['identity']
                )
                
                print(f"   {'‚úÖ' if success2 else '‚ùå'} –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {msg2}")
            else:
                print(f"   ‚ùå {msg}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        print(f"\n{'=' * 70}")
        print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –≠–ú–£–õ–Ø–¢–û–†–û–í")
        print(f"{'=' * 70}\n")
        
        final_emulators = manager.get_emulators_list()
        
        for emu in final_emulators:
            print(f"   {emu.name} - {emu.status.value}")
        
        print(f"\n‚úÖ –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(final_emulators)}")
        
        # –°–≤–æ–¥–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
        print(f"\n{'=' * 70}")
        print("üìö –°–í–û–î–ö–ê –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
        print(f"{'=' * 70}")
        
        print("""
‚úÖ –°–û–ó–î–ê–ù–ò–ï —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:
   manager.create_emulator(name, config={
       'resolution': '1920,1080,240',
       'cpu': 4,
       'memory': 8192
   })

‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –Ω–∞—Å—Ç—Ä–æ–µ–∫:
   manager.modify_emulator(name, {
       'manufacturer': 'samsung',
       'model': 'SM-G960F',
       'imei': 'auto',
       'mac': 'auto',
       'root': 1
   })

‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
   üñ•Ô∏è  –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: cpu, memory, resolution
   üì±  –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: manufacturer, model, imei, imsi, mac, androidid
   üîß  –°–∏—Å—Ç–µ–º–∞: root, autorotate, lockwindow

‚úÖ –î—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:
   - manager.start_emulator(name)
   - manager.stop_emulator(name)
   - manager.rename_emulator(old_name, new_name)
   - manager.delete_emulator(name)
   - manager.get_emulators_list()
        """)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    try:
        success = demo_emulator_management()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
