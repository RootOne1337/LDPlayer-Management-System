#!/usr/bin/env python3
"""
Demo script: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ LDPlayer Management System API
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –ø–µ–π–¥–∂–∏–Ω–≥
"""

import requests
import json
from typing import Dict, Any

# Configuration
BASE_URL = "http://localhost:8000"
API_V1 = f"{BASE_URL}/api/v1"

# Default credentials
DEFAULT_USER = "admin"
DEFAULT_PASS = "admin"

class LDPlayerAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LDPlayer Management API"""
    
    def __init__(self, base_url: str = API_V1):
        self.base_url = base_url
        self.token = None
        self.headers = {}
        
    def login(self, username: str, password: str) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
        print(f"\nüîê –õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ '{username}'...")
        
        response = requests.post(
            f"{self.base_url}/auth/login",
            json={"username": username, "password": password}
        )
        
        if response.status_code == 200:
            data = response.json()
            self.token = data["access_token"]
            self.headers = {"Authorization": f"Bearer {self.token}"}
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
            print(f"   –†–æ–ª—å: {data['user']['role']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            print(f"   {response.text}")
            return False
    
    def get_emulators(self, skip: int = 0, limit: int = 10, 
                      status: str = None, workstation_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–µ–π–¥–∂–∏–Ω–≥–æ–º"""
        print(f"\nüì± –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã (skip={skip}, limit={limit})...")
        
        params = {"skip": skip, "limit": limit}
        if status:
            params["status"] = status
        if workstation_id:
            params["workstation_id"] = workstation_id
        
        response = requests.get(
            f"{self.base_url}/emulators",
            headers=self.headers,
            params=params
        )
        
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {response.status_code}")
            print(f"   {response.text}")
            return None
    
    def get_workstations(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π"""
        print(f"\nüñ•Ô∏è  –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏...")
        
        response = requests.get(
            f"{self.base_url}/workstations",
            headers=self.headers
        )
        
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–π: {response.status_code}")
            print(f"   {response.text}")
            return None
    
    def get_health(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        print(f"\nüíö –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        response = requests.get(f"{self.base_url}/health")
        
        if response.status_code == 200:
            data = response.json()
            return data
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {response.status_code}")
            return None


def print_section(title: str):
    """–ü–µ—á–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*70}")
    print(f"  {title}")
    print(f"{'='*70}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    
    print_section("üöÄ LDPlayer Management System - API Demo")
    print(f"üìç API URL: {API_V1}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = LDPlayerAPIClient()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    print_section("1Ô∏è‚É£  –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ï–†–í–ï–†–ê")
    health = client.get_health()
    if health:
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {health.get('status', 'unknown')}")
        print(f"   –í–µ—Ä—Å–∏—è: {health.get('version', 'unknown')}")
        print(f"   Uptime: {health.get('uptime', 'unknown')}")
        print(f"   Database: {health.get('database_status', 'unknown')}")
    
    # 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    print_section("2Ô∏è‚É£  –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø")
    if not client.login(DEFAULT_USER, DEFAULT_PASS):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è. –í—ã—Ö–æ–¥.")
        return
    
    # 3. –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏
    print_section("3Ô∏è‚É£  –†–ê–ë–û–ß–ò–ï –°–¢–ê–ù–¶–ò–ò")
    ws_data = client.get_workstations()
    if ws_data and "data" in ws_data:
        workstations = ws_data["data"]
        print(f"üìä –í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: {len(workstations)}")
        for ws in workstations:
            status_emoji = "üü¢" if ws.get("status") == "online" else "üî¥"
            print(f"\n  {status_emoji} {ws.get('name')} (ID: {ws.get('id')})")
            print(f"     IP: {ws.get('ip_address')}")
            print(f"     –°—Ç–∞—Ç—É—Å: {ws.get('status')}")
            print(f"     LDPlayer –ø—É—Ç—å: {ws.get('ldplayer_path')}")
    
    # 4. –ü–æ–ª—É—á–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä—ã (–≤—Å–µ)
    print_section("4Ô∏è‚É£  –í–°–ï –≠–ú–£–õ–Ø–¢–û–†–´ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞)")
    emul_data = client.get_emulators(limit=100)
    if emul_data and "data" in emul_data:
        emulators = emul_data["data"]
        pagination = emul_data.get("pagination", {})
        
        print(f"üìä –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {pagination.get('total', 'unknown')}")
        print(f"   –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(emulators)}")
        print(f"   –ü–µ–π–¥–∂–∏–Ω–≥: skip={pagination.get('skip')}, limit={pagination.get('limit')}")
        
        if emulators:
            for i, emul in enumerate(emulators, 1):
                status_emoji = "‚ñ∂Ô∏è " if emul.get("status") == "running" else "‚èπÔ∏è "
                print(f"\n  {i}. {status_emoji} {emul.get('name')} (ID: {emul.get('id')})")
                print(f"     –°—Ç–∞–Ω—Ü–∏—è: {emul.get('workstation_id')}")
                print(f"     –°—Ç–∞—Ç—É—Å: {emul.get('status')}")
                print(f"     –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {emul.get('resolution')}")
                print(f"     DPI: {emul.get('dpi')}")
        else:
            print("‚ö†Ô∏è  –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 5. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    print_section("5Ô∏è‚É£  –≠–ú–£–õ–Ø–¢–û–†–´ –° –§–ò–õ–¨–¢–†–û–ú (status=running)")
    running_data = client.get_emulators(status="running", limit=100)
    if running_data and "data" in running_data:
        running = running_data["data"]
        print(f"üìä –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(running)}")
        for emul in running:
            print(f"  ‚ñ∂Ô∏è  {emul.get('name')} - {emul.get('status')}")
    
    # 6. –ü–µ–π–¥–∂–∏–Ω–≥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    print_section("6Ô∏è‚É£  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–ï–ô–î–ñ–ò–ù–ì–ê")
    print("üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 (skip=0, limit=2):")
    page1 = client.get_emulators(skip=0, limit=2)
    if page1 and "data" in page1:
        for emul in page1["data"]:
            print(f"  ‚Ä¢ {emul.get('name')}")
        print(f"  –ï—Å—Ç—å –µ—â—ë —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page1.get('pagination', {}).get('has_more')}")
    
    print("\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2 (skip=2, limit=2):")
    page2 = client.get_emulators(skip=2, limit=2)
    if page2 and "data" in page2:
        for emul in page2["data"]:
            print(f"  ‚Ä¢ {emul.get('name')}")
    
    # 7. API Response Format
    print_section("7Ô∏è‚É£  –§–û–†–ú–ê–¢ API –û–¢–í–ï–¢–ê")
    print("‚úÖ Unified API Response Model:")
    print(json.dumps({
        "success": True,
        "message": "Emulators retrieved successfully",
        "data": [
            {
                "id": "emul_001",
                "name": "Android 11",
                "workstation_id": "ws_001",
                "status": "running",
                "resolution": "720x1280",
                "dpi": 300,
                "cpu_cores": 2,
                "ram_mb": 2048
            }
        ],
        "pagination": {
            "skip": 0,
            "limit": 10,
            "total": 5,
            "has_more": False
        },
        "timestamp": "2025-10-19T18:52:26.758953"
    }, indent=2, ensure_ascii=False))
    
    print_section("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:8000/docs")
    print("üîÑ OpenAPI Schema: http://localhost:8000/openapi.json")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
