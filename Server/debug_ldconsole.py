#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ldconsole –∫–æ–º–∞–Ω–¥.
"""

import subprocess
import sys
from pathlib import Path

def debug_ldconsole():
    """–û—Ç–ª–∞–¥–∫–∞ ldconsole."""
    print("üîç –û–¢–õ–ê–î–ö–ê LDCONSOLE")
    print("=" * 60)
    
    ldconsole_path = r"C:\LDPlayer\LDPlayer9\ldconsole.exe"
    
    print(f"\nüìç –ü—É—Ç—å: {ldconsole_path}")
    print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {Path(ldconsole_path).exists()}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ subprocess.run")
    print("=" * 60)
    
    try:
        result = subprocess.run(
            [ldconsole_path, "list"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        print(f"\n–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        print(f"\nSTDOUT ({len(result.stdout)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"'{result.stdout}'")
        print(f"\nSTDERR ({len(result.stderr)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"'{result.stderr}'")
        
        # –†–∞–∑–±–æ—Ä –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        if result.stdout:
            lines = result.stdout.strip().split('\n')
            print(f"\nüìã –°—Ç—Ä–æ–∫ –≤ –≤—ã–≤–æ–¥–µ: {len(lines)}")
            for i, line in enumerate(lines, 1):
                print(f"   {i}. '{line}' (–¥–ª–∏–Ω–∞: {len(line)})")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 2: –ß–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ WorkstationManager
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 2: –ß–µ—Ä–µ–∑ WorkstationManager._parse_emulators_list")
    print("=" * 60)
    
    try:
        sys.path.insert(0, str(Path(__file__).parent))
        from src.remote.workstation import WorkstationManager
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥
        result = subprocess.run(
            [ldconsole_path, "list"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        output = result.stdout
        print(f"\n–ò—Å—Ö–æ–¥–Ω—ã–π –≤—ã–≤–æ–¥: '{output}'")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π)
        class DummyManager:
            """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–µ—Ç–æ–¥—É."""
            @staticmethod
            def _parse_emulators_list(output_text):
                return WorkstationManager._parse_emulators_list(None, output_text)
        
        emulators = DummyManager._parse_emulators_list(output)
        
        print(f"\n‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(emulators)}")
        for emu in emulators:
            print(f"   - {emu}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ run_command
    print("\n" + "=" * 60)
    print("–¢–ï–°–¢ 3: –ß–µ—Ä–µ–∑ –ø–æ–¥–º–µ–Ω–µ–Ω–Ω—ã–π run_command")
    print("=" * 60)
    
    try:
        def local_run_command(command, args=None):
            """–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã."""
            args = args or []
            print(f"\n   –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {command} {' '.join(args)}")
            
            result = subprocess.run(
                [command] + args,
                capture_output=True,
                text=True,
                timeout=30
            )
            
            print(f"   –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
            print(f"   STDOUT: '{result.stdout}'")
            print(f"   STDERR: '{result.stderr}'")
            
            return result.returncode, result.stdout, result.stderr
        
        exitcode, stdout, stderr = local_run_command(ldconsole_path, ["list"])
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   exitcode: {exitcode}")
        print(f"   stdout –¥–ª–∏–Ω–∞: {len(stdout)}")
        print(f"   stderr –¥–ª–∏–Ω–∞: {len(stderr)}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    try:
        debug_ldconsole()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
