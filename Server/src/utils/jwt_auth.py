"""
JWT Authentication Module
–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è JWT –¥–ª—è FastAPI
"""
from datetime import datetime, timedelta, timezone
from typing import Optional
import os
from functools import lru_cache

import jwt
from pydantic import BaseModel
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer


# Configuration
class JWTConfig:
    """JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"""
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å default
    SECRET_KEY = os.getenv(
        "JWT_SECRET_KEY",
        "your-super-secret-key-change-this-in-production-12345"
    )
    ALGORITHM = os.getenv("JWT_ALGORITHM", "HS256")
    EXPIRATION_MINUTES = int(os.getenv("JWT_EXPIRATION_MINUTES", "30"))


# Pydantic Models
class TokenData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ –≤ JWT —Ç–æ–∫–µ–Ω–µ"""
    username: str
    user_id: Optional[str] = None
    scopes: list = []


class Token(BaseModel):
    """–û—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º"""
    access_token: str
    token_type: str
    expires_in: int


class UserLogin(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥"""
    username: str
    password: str


class User(BaseModel):
    """–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    username: str
    user_id: Optional[str] = None
    active: bool = True
    scopes: list = []


# Fake users database (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
FAKE_USERS_DB = {
    "admin": {
        "username": "admin",
        "user_id": "001",
        "hashed_password": os.getenv("ADMIN_PASSWORD_HASH", "admin"),  # –í production - —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å!
        "active": True,
        "scopes": ["read", "write", "delete"]
    },
    "user": {
        "username": "user",
        "user_id": "002",
        "hashed_password": os.getenv("USER_PASSWORD_HASH", "user"),
        "active": True,
        "scopes": ["read"]
    }
}


class JWTManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä JWT —Ç–æ–∫–µ–Ω–æ–≤
    """
    
    def __init__(self, config: JWTConfig = JWTConfig()):
        self.config = config
    
    def create_access_token(
        self,
        data: dict,
        expires_delta: Optional[timedelta] = None
    ) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ —Ç–æ–∫–µ–Ω
            expires_delta: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
            
        Returns:
            JWT —Ç–æ–∫–µ–Ω
        """
        to_encode = data.copy()
        
        if expires_delta:
            expire = datetime.now(timezone.utc) + expires_delta
        else:
            expire = datetime.now(timezone.utc) + timedelta(
                minutes=self.config.EXPIRATION_MINUTES
            )
        
        to_encode.update({"exp": expire})
        
        encoded_jwt = jwt.encode(
            to_encode,
            self.config.SECRET_KEY,
            algorithm=self.config.ALGORITHM
        )
        
        return encoded_jwt
    
    def verify_token(self, token: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
        
        Args:
            token: JWT —Ç–æ–∫–µ–Ω
            
        Returns:
            –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
            
        Raises:
            HTTPException: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        """
        try:
            payload = jwt.decode(
                token,
                self.config.SECRET_KEY,
                algorithms=[self.config.ALGORITHM]
            )
            
            username: str = payload.get("sub")
            
            if username is None:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid token: missing username"
                )
            
            return payload
            
        except jwt.ExpiredSignatureError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Token has expired"
            )
        except jwt.InvalidTokenError:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token"
            )
    
    def login(
        self,
        username: str,
        password: str,
        scopes: list = None
    ) -> Token:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ö–æ–¥ –∏ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
        
        Args:
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            scopes: –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            
        Returns:
            –û–±—ä–µ–∫—Ç Token —Å access_token
            
        Raises:
            HTTPException: –ï—Å–ª–∏ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã
        """
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user = FAKE_USERS_DB.get(username)
        
        if not user or user["hashed_password"] != password:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid credentials",
                headers={"WWW-Authenticate": "Bearer"}
            )
        
        if not user["active"]:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="User is inactive"
            )
        
        # –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω
        access_scopes = scopes or user.get("scopes", [])
        
        token_data = {
            "sub": user["username"],
            "user_id": user["user_id"],
            "scopes": access_scopes
        }
        
        access_token = self.create_access_token(data=token_data)
        
        return Token(
            access_token=access_token,
            token_type="bearer",
            expires_in=self.config.EXPIRATION_MINUTES * 60
        )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
jwt_manager = JWTManager()
security = HTTPBearer()


# Dependency functions
async def get_current_user(
    credentials = Depends(security)
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    
    Args:
        credentials: HTTP Bearer —Ç–æ–∫–µ–Ω
        
    Returns:
        –û–±—ä–µ–∫—Ç User
    """
    token = credentials.credentials
    payload = jwt_manager.verify_token(token)
    
    username: str = payload.get("sub")
    user_id: str = payload.get("user_id")
    scopes: list = payload.get("scopes", [])
    
    return User(
        username=username,
        user_id=user_id,
        scopes=scopes
    )


async def get_current_admin(
    current_user: User = Depends(get_current_user)
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ write/delete
    
    Args:
        current_user: –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        –û–±—ä–µ–∫—Ç User (–µ—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω)
        
    Raises:
        HTTPException: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω
    """
    if "write" not in current_user.scopes:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Only admins can perform this action"
        )
    
    return current_user


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def authenticate_user(username: str, password: str) -> Optional[dict]:
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        
    Returns:
        –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    user = FAKE_USERS_DB.get(username)
    
    if not user:
        return None
    
    # –í production: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bcrypt –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    if user["hashed_password"] != password:
        return None
    
    if not user["active"]:
        return None
    
    return user


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\n" + "="*60)
    print("üîê JWT Authentication Manager")
    print("="*60)
    
    # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = JWTManager()
    
    # –í—Ö–æ–¥
    print("\n[1] Login Test")
    try:
        token_response = manager.login("admin", "admin")
        print(f"‚úÖ Login successful")
        print(f"   Token: {token_response.access_token[:50]}...")
        print(f"   Expires in: {token_response.expires_in} seconds")
    except HTTPException as e:
        print(f"‚ùå Login failed: {e.detail}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω
    print(f"\n[2] Token Verification Test")
    try:
        token = manager.create_access_token({"sub": "admin"})
        payload = manager.verify_token(token)
        print(f"‚úÖ Token verified")
        print(f"   Username: {payload.get('sub')}")
        print(f"   Expires: {datetime.fromtimestamp(payload.get('exp'), tz=timezone.utc)}")
    except HTTPException as e:
        print(f"‚ùå Verification failed: {e.detail}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    print(f"\n[3] Failed Login Test")
    try:
        token_response = manager.login("admin", "wrong_password")
    except HTTPException as e:
        print(f"‚úÖ Correctly rejected: {e.detail}")
    
    print("\n" + "="*60)
    print("‚úÖ JWT Authentication ready!")
    print("="*60)
