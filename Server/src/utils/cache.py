"""
üöÄ PERFORMANCE OPTIMIZATION - –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫—ç—à –¥–ª—è API

–ü—Ä–æ—Å—Ç–∞—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:
- In-memory –∫—ç—à (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç Redis)
- TTL (Time To Live) –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
- –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
"""

import time
import functools
import threading
from typing import Any, Optional, Callable, Dict
from datetime import datetime, timedelta


class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ —Å TTL"""
    def __init__(self, value: Any, ttl_seconds: int):
        self.value = value
        self.created_at = time.time()
        self.ttl_seconds = ttl_seconds
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∑–∞–ø–∏—Å—å"""
        elapsed = time.time() - self.created_at
        return elapsed > self.ttl_seconds
    
    def age_ms(self) -> float:
        """–í–æ–∑—Ä–∞—Å—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        return (time.time() - self.created_at) * 1000


class SimpleCache:
    """–ü—Ä–æ—Å—Ç–∞—è in-memory –∫—ç—à —Å TTL"""
    
    def __init__(self):
        self._cache: Dict[str, CacheEntry] = {}
        self._lock = threading.RLock()
        self._stats = {
            'hits': 0,
            'misses': 0,
            'evictions': 0
        }
    
    def set(self, key: str, value: Any, ttl_seconds: int = 300) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        with self._lock:
            self._cache[key] = CacheEntry(value, ttl_seconds)
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if key not in self._cache:
                self._stats['misses'] += 1
                return None
            
            entry = self._cache[key]
            
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å TTL
            if entry.is_expired():
                del self._cache[key]
                self._stats['evictions'] += 1
                self._stats['misses'] += 1
                return None
            
            self._stats['hits'] += 1
            return entry.value
    
    def delete(self, key: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if key in self._cache:
                del self._cache[key]
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à"""
        with self._lock:
            self._cache.clear()
    
    def cleanup_expired(self) -> int:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–ø–∏—Å–∏"""
        with self._lock:
            expired_keys = [
                key for key, entry in self._cache.items()
                if entry.is_expired()
            ]
            for key in expired_keys:
                del self._cache[key]
                self._stats['evictions'] += 1
            return len(expired_keys)
    
    def get_stats(self) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        with self._lock:
            total = self._stats['hits'] + self._stats['misses']
            hit_rate = (self._stats['hits'] / total * 100) if total > 0 else 0
            return {
                'hits': self._stats['hits'],
                'misses': self._stats['misses'],
                'evictions': self._stats['evictions'],
                'total_requests': total,
                'hit_rate_percent': hit_rate,
                'size': len(self._cache)
            }
    
    def reset_stats(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._lock:
            for key in self._stats:
                self._stats[key] = 0


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
_cache = SimpleCache()


def cache_result(ttl_seconds: int = 300, key_prefix: str = "") -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    
    Args:
        ttl_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ (—Å–µ–∫—É–Ω–¥—ã)
        key_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∫–ª—é—á–∞ –∫—ç—à–∞
    
    Example:
        @cache_result(ttl_seconds=60, key_prefix="workstations")
        def get_workstations_list():
            return expensive_operation()
    """
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            cache_key = f"{key_prefix}:{func.__name__}"
            if args:
                cache_key += f":{':'.join(str(a) for a in args)}"
            if kwargs:
                cache_key += f":{':'.join(f'{k}={v}' for k, v in sorted(kwargs.items()))}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_value = _cache.get(cache_key)
            if cached_value is not None:
                return cached_value
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º
            result = func(*args, **kwargs)
            _cache.set(cache_key, result, ttl_seconds)
            return result
        
        return wrapper
    return decorator


def invalidate_cache(pattern: Optional[str] = None) -> None:
    """
    –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
    
    Args:
        pattern: –ï—Å–ª–∏ None, –æ—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à.
                –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, —É–¥–∞–ª—è–µ—Ç –∫–ª—é—á–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    if pattern is None:
        _cache.clear()
    else:
        with _cache._lock:
            keys_to_delete = [
                key for key in _cache._cache.keys()
                if key.startswith(pattern)
            ]
            for key in keys_to_delete:
                del _cache._cache[key]


def get_cache() -> SimpleCache:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞"""
    return _cache


def get_cache_stats() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
    return _cache.get_stats()
