"""
–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
- –ù–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å JWT_SECRET_KEY
- –ù–∞–ª–∏—á–∏–µ ENCRYPTION_KEY
"""

import os
import sys
from pathlib import Path
from typing import List, Tuple


def validate_env_file() -> Tuple[bool, List[str]]:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞ –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    
    Returns:
        Tuple[bool, List[str]]: (is_valid, error_messages)
    """
    errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞
    env_file = Path(__file__).parent.parent.parent / '.env'
    if not env_file.exists():
        errors.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        errors.append("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example:")
        errors.append("   cp .env.example .env")
        return False, errors
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    from dotenv import load_dotenv
    load_dotenv(env_file)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_SECRET_KEY
    jwt_secret = os.getenv('JWT_SECRET_KEY', '')
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    unsafe_defaults = [
        'your-secret-key',
        'your-super-secret-key',
        'change-this',
        'default',
        'secret',
        '12345',
        'password'
    ]
    
    if not jwt_secret:
        errors.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: JWT_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env!")
        errors.append("   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á:")
        errors.append("   python -c \"import secrets; print(secrets.token_urlsafe(32))\"")
    elif len(jwt_secret) < 32:
        errors.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: JWT_SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!")
        errors.append(f"   –¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(jwt_secret)} —Å–∏–º–≤–æ–ª–æ–≤")
        errors.append("   –ú–∏–Ω–∏–º—É–º: 32 —Å–∏–º–≤–æ–ª–∞")
        errors.append("   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á:")
        errors.append("   python -c \"import secrets; print(secrets.token_urlsafe(32))\"")
    elif any(unsafe in jwt_secret.lower() for unsafe in unsafe_defaults):
        errors.append("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: JWT_SECRET_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
        errors.append(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {jwt_secret[:30]}...")
        errors.append("   –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤!")
        errors.append("   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á:")
        errors.append("   python -c \"import secrets; print(secrets.token_urlsafe(32))\"")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ENCRYPTION_KEY
    encryption_key = os.getenv('ENCRYPTION_KEY', '')
    
    if not encryption_key:
        # –≠—Ç–æ warning, –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    elif len(encryption_key) < 32:
        # –≠—Ç–æ warning, –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        pass  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ LOG_LEVEL –¥–ª—è production
    log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
    if log_level == 'DEBUG':
        # –≠—Ç–æ warning, –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        pass  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è development
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (JWT_SECRET_KEY)
    return len(errors) == 0, errors


def print_validation_results(is_valid: bool, errors: List[str]) -> None:
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
    print("\n" + "="*70)
    # ‚úÖ FIXED: –ò—Å–ø–æ–ª—å–∑—É–µ–º ASCII —Å–∏–º–≤–æ–ª—ã –≤–º–µ—Å—Ç–æ emoji –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
    print("[SECURITY] Configuration Security Check")
    print("="*70 + "\n")
    
    if is_valid:
        print("[OK] All checks passed successfully!")
        print("[OK] Configuration is secure")
        print("\n" + "="*70 + "\n")
    else:
        print("[ERROR] Security issues detected:\n")
        for error in errors:
            print(error)
        print("\n" + "="*70)
        print("üõë –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù")
        print("="*70 + "\n")


def validate_and_exit_if_invalid() -> None:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≤—ã—Ö–æ–¥–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.
    """
    is_valid, errors = validate_env_file()
    print_validation_results(is_valid, errors)
    
    if not is_valid:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        critical_errors = [e for e in errors if '‚ùå' in e]
        if critical_errors:
            print("üí° –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            print()
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ):")
            print("   cp .env.example .env")
            print()
            print("2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–ª—é—á–∏:")
            print("   python -c \"import secrets; print('JWT_SECRET_KEY=' + secrets.token_urlsafe(32))\"")
            print("   python -c \"import secrets; print('ENCRYPTION_KEY=' + secrets.token_urlsafe(32))\"")
            print()
            print("3. –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
            print()
            print("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä")
            print()
            sys.exit(1)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    validate_and_exit_if_invalid()
