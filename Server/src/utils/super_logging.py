"""
üî• –°–£–ü–ï–†-–õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô
Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤, WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –æ–ø–µ—Ä–∞—Ü–∏–π
"""

import time
import json
from datetime import datetime
from typing import Callable
from fastapi import Request, Response
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.types import ASGIApp

from ..utils.logger import get_logger, LogCategory

logger = get_logger(__name__)


class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


class SuperLoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    
    –õ–æ–≥–∏—Ä—É–µ—Ç:
    - HTTP –∑–∞–ø—Ä–æ—Å—ã (–º–µ—Ç–æ–¥, –ø—É—Ç—å, –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–ª–æ)
    - HTTP –æ—Ç–≤–µ—Ç—ã (—Å—Ç–∞—Ç—É—Å, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä)
    - –û—à–∏–±–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    """
    
    def __init__(self, app: ASGIApp, log_request_body: bool = False, log_response_body: bool = False):
        super().__init__(app)
        self.log_request_body = log_request_body
        self.log_response_body = log_response_body
        self.request_count = 0
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        self.request_count += 1
        request_id = self.request_count
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        start_time = time.time()
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        method = request.method
        path = request.url.path
        query_params = dict(request.query_params)
        client_ip = request.client.host if request.client else "unknown"
        user_agent = request.headers.get("user-agent", "unknown")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –º–µ—Ç–æ–¥—É
        method_color = {
            "GET": Colors.CYAN,
            "POST": Colors.GREEN,
            "PUT": Colors.YELLOW,
            "DELETE": Colors.RED,
            "PATCH": Colors.YELLOW
        }.get(method, Colors.BLUE)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        print(f"\n{Colors.BLUE}{'‚îÄ' * 100}{Colors.ENDC}")
        print(f"{Colors.BOLD}[{timestamp}] üì• –í–•–û–î–Ø–©–ò–ô –ó–ê–ü–†–û–° #{request_id}{Colors.ENDC}")
        print(f"{method_color}{Colors.BOLD}{method}{Colors.ENDC} {Colors.CYAN}{path}{Colors.ENDC}")
        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –ö–ª–∏–µ–Ω—Ç: {client_ip}")
        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} User-Agent: {user_agent[:80]}")
        
        if query_params:
            print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {Colors.YELLOW}{query_params}{Colors.ENDC}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if self.log_request_body and method in ["POST", "PUT", "PATCH"]:
            try:
                body = await request.body()
                if body:
                    try:
                        body_json = json.loads(body.decode())
                        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏
                        if "password" in body_json:
                            body_json["password"] = "***"
                        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {Colors.YELLOW}{json.dumps(body_json, ensure_ascii=False)[:200]}{Colors.ENDC}")
                    except:
                        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {len(body)} –±–∞–π—Ç")
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–ª–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                async def receive():
                    return {"type": "http.request", "body": body}
                request._receive = receive
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        try:
            response = await call_next(request)
            
            # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            duration = (time.time() - start_time) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_code = response.status_code
            if status_code < 300:
                status_color = Colors.GREEN
                status_icon = "‚úÖ"
            elif status_code < 400:
                status_color = Colors.CYAN
                status_icon = "‚Ü™Ô∏è"
            elif status_code < 500:
                status_color = Colors.YELLOW
                status_icon = "‚ö†Ô∏è"
            else:
                status_color = Colors.RED
                status_icon = "‚ùå"
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            print(f"  {Colors.CYAN}‚îî‚îÄ{Colors.ENDC} {status_icon} –°—Ç–∞—Ç—É—Å: {status_color}{Colors.BOLD}{status_code}{Colors.ENDC}")
            print(f"  {Colors.CYAN}   {Colors.ENDC} ‚è±Ô∏è  –í—Ä–µ–º—è: {Colors.BOLD}{duration:.2f}ms{Colors.ENDC}")
            
            # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if duration < 100:
                perf_color = Colors.GREEN
                perf_text = "–ë–´–°–¢–†–û"
            elif duration < 500:
                perf_color = Colors.YELLOW
                perf_text = "–ù–û–†–ú–ê–õ–¨–ù–û"
            else:
                perf_color = Colors.RED
                perf_text = "–ú–ï–î–õ–ï–ù–ù–û"
            
            print(f"  {Colors.CYAN}   {Colors.ENDC} üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf_color}{perf_text}{Colors.ENDC}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            response.headers["X-Request-ID"] = str(request_id)
            response.headers["X-Response-Time"] = f"{duration:.2f}ms"
            
            return response
            
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            duration = (time.time() - start_time) * 1000
            
            print(f"  {Colors.CYAN}‚îî‚îÄ{Colors.ENDC} {Colors.RED}‚ùå –û–®–ò–ë–ö–ê{Colors.ENDC}")
            print(f"  {Colors.RED}   ‚îú‚îÄ{Colors.ENDC} –¢–∏–ø: {type(e).__name__}")
            print(f"  {Colors.RED}   ‚îú‚îÄ{Colors.ENDC} –°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
            print(f"  {Colors.RED}   ‚îî‚îÄ{Colors.ENDC} –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {duration:.2f}ms")
            
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}", extra={
                "request_id": request_id,
                "method": method,
                "path": path,
                "duration_ms": duration,
                "client_ip": client_ip
            })
            
            # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            raise


class WebSocketLoggingMiddleware:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    @staticmethod
    def log_connection(client_id: str, action: str, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å–æ–±—ã—Ç–∏–π"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        action_icons = {
            "connect": "üîå",
            "disconnect": "üîö",
            "message": "üí¨",
            "error": "‚ùå",
            "ping": "üì°"
        }
        
        action_colors = {
            "connect": Colors.GREEN,
            "disconnect": Colors.YELLOW,
            "message": Colors.CYAN,
            "error": Colors.RED,
            "ping": Colors.BLUE
        }
        
        icon = action_icons.get(action, "üì®")
        color = action_colors.get(action, Colors.CYAN)
        
        print(f"\n{Colors.BLUE}{'‚îÄ' * 100}{Colors.ENDC}")
        print(f"{Colors.BOLD}[{timestamp}] {icon} WebSocket {action.upper()}{Colors.ENDC}")
        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –ö–ª–∏–µ–Ω—Ç: {color}{client_id}{Colors.ENDC}")
        if details:
            print(f"  {Colors.CYAN}‚îî‚îÄ{Colors.ENDC} –î–µ—Ç–∞–ª–∏: {details}")


class OperationLoggingMiddleware:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ –∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏"""
    
    @staticmethod
    def log_operation(operation_type: str, target: str, status: str, duration: float = 0, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        operation_icons = {
            "start": "‚ñ∂Ô∏è",
            "stop": "‚èπÔ∏è",
            "restart": "üîÑ",
            "connect": "üîó",
            "disconnect": "üîå",
            "check": "üîç",
            "update": "‚ôªÔ∏è"
        }
        
        status_colors = {
            "success": Colors.GREEN,
            "error": Colors.RED,
            "pending": Colors.YELLOW,
            "running": Colors.CYAN
        }
        
        icon = operation_icons.get(operation_type, "‚öôÔ∏è")
        color = status_colors.get(status, Colors.CYAN)
        
        print(f"\n{Colors.BLUE}{'‚îÄ' * 100}{Colors.ENDC}")
        print(f"{Colors.BOLD}[{timestamp}] {icon} –û–ü–ï–†–ê–¶–ò–Ø: {operation_type.upper()}{Colors.ENDC}")
        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –¶–µ–ª—å: {Colors.BOLD}{target}{Colors.ENDC}")
        print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –°—Ç–∞—Ç—É—Å: {color}{status.upper()}{Colors.ENDC}")
        if duration > 0:
            print(f"  {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Colors.BOLD}{duration:.2f}ms{Colors.ENDC}")
        if details:
            print(f"  {Colors.CYAN}‚îî‚îÄ{Colors.ENDC} –î–µ—Ç–∞–ª–∏: {details}")


class DatabaseLoggingMiddleware:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def log_query(query_type: str, table: str, duration: float = 0, rows_affected: int = 0):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
        
        query_icons = {
            "SELECT": "üîç",
            "INSERT": "‚ûï",
            "UPDATE": "‚ôªÔ∏è",
            "DELETE": "‚ûñ"
        }
        
        icon = query_icons.get(query_type, "üìä")
        
        print(f"  {Colors.CYAN}[{timestamp}]{Colors.ENDC} {icon} {Colors.YELLOW}SQL{Colors.ENDC}: {query_type} FROM {Colors.BOLD}{table}{Colors.ENDC}")
        if duration > 0:
            print(f"    {Colors.CYAN}‚îú‚îÄ{Colors.ENDC} –í—Ä–µ–º—è: {duration:.2f}ms")
        if rows_affected > 0:
            print(f"    {Colors.CYAN}‚îî‚îÄ{Colors.ENDC} –°—Ç—Ä–æ–∫ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ: {rows_affected}")


# –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö middleware
__all__ = [
    'SuperLoggingMiddleware',
    'WebSocketLoggingMiddleware', 
    'OperationLoggingMiddleware',
    'DatabaseLoggingMiddleware'
]
