"""
Intelligent Project Analyzer
============================
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.

Author: LDPlayer Management System
Version: 1.0.0
"""

import ast
import os
import json
from pathlib import Path
from typing import Dict, List, Set, Tuple, Any, Optional
from dataclasses import dataclass, field, asdict
from datetime import datetime
from collections import defaultdict, Counter
import re


# ANSI Colors
class Colors:
    """ANSI —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


@dataclass
class ModuleInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ"""
    path: str
    name: str
    imports: List[str] = field(default_factory=list)
    imported_by: List[str] = field(default_factory=list)
    functions: List[str] = field(default_factory=list)
    classes: List[str] = field(default_factory=list)
    lines_of_code: int = 0
    is_used: bool = False
    complexity_score: int = 0


@dataclass
class DependencyGraph:
    """–ì—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª–µ–π"""
    nodes: Dict[str, ModuleInfo] = field(default_factory=dict)
    edges: List[Tuple[str, str]] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "nodes": {k: asdict(v) for k, v in self.nodes.items()},
            "edges": [[src, dst] for src, dst in self.edges]
        }


@dataclass
class ProjectAnalysisReport:
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    timestamp: str
    project_path: str
    total_files: int = 0
    total_lines: int = 0
    total_modules: int = 0
    total_functions: int = 0
    total_classes: int = 0
    unused_modules: List[str] = field(default_factory=list)
    unused_imports: Dict[str, List[str]] = field(default_factory=dict)
    circular_dependencies: List[List[str]] = field(default_factory=list)
    dependency_graph: Optional[DependencyGraph] = None
    recommendations: List[str] = field(default_factory=list)
    database_usage: Dict[str, Any] = field(default_factory=dict)
    complexity_hotspots: List[Tuple[str, int]] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        data = asdict(self)
        if self.dependency_graph:
            data['dependency_graph'] = self.dependency_graph.to_dict()
        return data
    
    def to_json(self) -> str:
        return json.dumps(self.to_dict(), indent=2, ensure_ascii=False)


class ProjectAnalyzer:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_root = project_root / "src"
        self.modules: Dict[str, ModuleInfo] = {}
        self.dependency_graph = DependencyGraph()
        
    def analyze(self) -> ProjectAnalysisReport:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"\n{Colors.CYAN}{'=' * 100}{Colors.ENDC}")
        print(f"{Colors.BOLD}{Colors.CYAN}üß† –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ï–ö–¢–ê{Colors.ENDC}".center(100))
        print(f"{Colors.CYAN}{'=' * 100}{Colors.ENDC}\n")
        
        report = ProjectAnalysisReport(
            timestamp=datetime.now().isoformat(),
            project_path=str(self.project_root)
        )
        
        # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
        print(f"{Colors.BLUE}üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...{Colors.ENDC}")
        self._scan_project_files(report)
        
        # 2. –ê–Ω–∞–ª–∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"{Colors.BLUE}üîó –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏...{Colors.ENDC}")
        self._analyze_dependencies(report)
        
        # 3. –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞
        print(f"{Colors.BLUE}üîç –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞...{Colors.ENDC}")
        self._find_unused_code(report)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
        print(f"{Colors.BLUE}üìä –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞...{Colors.ENDC}")
        self._analyze_complexity(report)
        
        # 5. –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print(f"{Colors.BLUE}üîÑ –ü–æ–∏—Å–∫ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...{Colors.ENDC}")
        self._find_circular_dependencies(report)
        
        # 6. –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"{Colors.BLUE}üíæ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...{Colors.ENDC}")
        self._analyze_database_usage(report)
        
        # 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"{Colors.BLUE}üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...{Colors.ENDC}")
        self._generate_recommendations(report)
        
        # 8. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._print_report(report)
        
        # 9. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self._save_report(report)
        
        return report
    
    def _scan_project_files(self, report: ProjectAnalysisReport):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ Python —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        if not self.src_root.exists():
            print(f"{Colors.RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!{Colors.ENDC}")
            return
        
        total_lines = 0
        file_count = 0
        
        for py_file in self.src_root.rglob("*.py"):
            if "__pycache__" in str(py_file):
                continue
            
            file_count += 1
            relative_path = py_file.relative_to(self.project_root)
            module_name = str(relative_path).replace(os.sep, ".").replace(".py", "")
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
            try:
                with open(py_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ –ø—É—Å—Ç—ã–µ –∏ –Ω–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    code_lines = [l for l in lines if l.strip() and not l.strip().startswith('#')]
                    lines_count = len(code_lines)
                    total_lines += lines_count
            except:
                lines_count = 0
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –º–æ–¥—É–ª—è
            module_info = self._parse_module(py_file, module_name, lines_count)
            self.modules[module_name] = module_info
            self.dependency_graph.nodes[module_name] = module_info
        
        report.total_files = file_count
        report.total_lines = total_lines
        report.total_modules = len(self.modules)
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {file_count} Python —Ñ–∞–π–ª–æ–≤ ({total_lines} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞)")
    
    def _parse_module(self, file_path: Path, module_name: str, lines_count: int) -> ModuleInfo:
        """–ü–∞—Ä—Å–∏—Ç—å Python –º–æ–¥—É–ª—å –∏ –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
        module_info = ModuleInfo(
            path=str(file_path),
            name=module_name,
            lines_of_code=lines_count
        )
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                tree = ast.parse(f.read(), filename=str(file_path))
            
            # –ò–∑–≤–ª–µ—á—å –∏–º–ø–æ—Ä—Ç—ã
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        module_info.imports.append(alias.name)
                elif isinstance(node, ast.ImportFrom):
                    if node.module:
                        module_info.imports.append(node.module)
                
                # –ò–∑–≤–ª–µ—á—å —Ñ—É–Ω–∫—Ü–∏–∏
                elif isinstance(node, ast.FunctionDef):
                    module_info.functions.append(node.name)
                
                # –ò–∑–≤–ª–µ—á—å –∫–ª–∞—Å—Å—ã
                elif isinstance(node, ast.ClassDef):
                    module_info.classes.append(node.name)
        
        except Exception as e:
            print(f"  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {module_name}: {e}")
        
        return module_info
    
    def _analyze_dependencies(self, report: ProjectAnalysisReport):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        for module_name, module_info in self.modules.items():
            for imported in module_info.imports:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                for other_module in self.modules.keys():
                    if imported in other_module or other_module.endswith("." + imported):
                        # –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–±—Ä–æ –≤ –≥—Ä–∞—Ñ
                        self.dependency_graph.edges.append((module_name, other_module))
                        
                        # –û—Ç–º–µ—Ç–∏—Ç—å —á—Ç–æ other_module –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                        if other_module in self.modules:
                            self.modules[other_module].is_used = True
                            self.modules[other_module].imported_by.append(module_name)
        
        report.dependency_graph = self.dependency_graph
        print(f"  ‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω –≥—Ä–∞—Ñ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(self.dependency_graph.edges)} —Å–≤—è–∑–µ–π")
    
    def _find_unused_code(self, report: ProjectAnalysisReport):
        """–ù–∞–π—Ç–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥"""
        # –ù–∞–π—Ç–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–æ–¥—É–ª–∏
        for module_name, module_info in self.modules.items():
            if not module_info.is_used and not module_name.endswith("__init__"):
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ entry point (server.py, etc)
                if "server.py" not in module_info.path and "main.py" not in module_info.path:
                    report.unused_modules.append(module_name)
        
        # –ù–∞–π—Ç–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑)
        for module_name, module_info in self.modules.items():
            unused_in_module = []
            for imported in module_info.imports:
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –≤ –∫–æ–¥–µ
                # (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ —Ñ–∞–π–ª–∞)
                try:
                    with open(module_info.path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # –£–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏–º–ø–æ—Ä—Ç–∞
                        import_pattern = rf"import\s+{re.escape(imported)}|from\s+{re.escape(imported)}"
                        content_without_import = re.sub(import_pattern, "", content)
                        
                        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                        if imported not in content_without_import:
                            unused_in_module.append(imported)
                except:
                    pass
            
            if unused_in_module:
                report.unused_imports[module_name] = unused_in_module
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(report.unused_modules)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(report.unused_imports)} –º–æ–¥—É–ª–µ–π —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏")
    
    def _analyze_complexity(self, report: ProjectAnalysisReport):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞"""
        complexity_scores = []
        
        for module_name, module_info in self.modules.items():
            # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: LOC + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π + –∫–ª–∞—Å—Å–æ–≤
            complexity = (
                module_info.lines_of_code +
                len(module_info.functions) * 10 +
                len(module_info.classes) * 20
            )
            module_info.complexity_score = complexity
            complexity_scores.append((module_name, complexity))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_scores.sort(key=lambda x: x[1], reverse=True)
        
        # –¢–æ–ø 10 —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        report.complexity_hotspots = complexity_scores[:10]
        
        report.total_functions = sum(len(m.functions) for m in self.modules.values())
        report.total_classes = sum(len(m.classes) for m in self.modules.values())
        
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {report.total_functions} —Ñ—É–Ω–∫—Ü–∏–π –∏ {report.total_classes} –∫–ª–∞—Å—Å–æ–≤")
    
    def _find_circular_dependencies(self, report: ProjectAnalysisReport):
        """–ù–∞–π—Ç–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —Ü–∏–∫–ª–æ–≤ (DFS)
        visited = set()
        rec_stack = set()
        cycles = []
        
        def dfs(node: str, path: List[str]):
            visited.add(node)
            rec_stack.add(node)
            path.append(node)
            
            # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö —Å–æ—Å–µ–¥–µ–π
            neighbors = [dst for src, dst in self.dependency_graph.edges if src == node]
            
            for neighbor in neighbors:
                if neighbor not in visited:
                    dfs(neighbor, path.copy())
                elif neighbor in rec_stack:
                    # –ù–∞–π–¥–µ–Ω —Ü–∏–∫–ª!
                    cycle_start = path.index(neighbor)
                    cycle = path[cycle_start:] + [neighbor]
                    if cycle not in cycles:
                        cycles.append(cycle)
            
            rec_stack.remove(node)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å DFS –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
        for node in self.dependency_graph.nodes.keys():
            if node not in visited:
                dfs(node, [])
        
        report.circular_dependencies = cycles
        
        if cycles:
            print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(cycles)} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!")
        else:
            print(f"  ‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    def _analyze_database_usage(self, report: ProjectAnalysisReport):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        db_usage = {
            "models_defined": [],
            "migrations_count": 0,
            "query_locations": [],
            "orm_usage": []
        }
        
        # –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π –ë–î
        for module_name, module_info in self.modules.items():
            if "models" in module_name.lower():
                db_usage["models_defined"].extend([
                    f"{module_name}.{cls}" for cls in module_info.classes
                ])
            
            # –ü–æ–∏—Å–∫ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –∫–æ–¥–µ
            try:
                with open(module_info.path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "SELECT" in content or "INSERT" in content or "UPDATE" in content:
                        db_usage["query_locations"].append(module_name)
                    
                    # –ü–æ–∏—Å–∫ ORM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                    if "session." in content or ".query(" in content or "db." in content:
                        db_usage["orm_usage"].append(module_name)
            except:
                pass
        
        report.database_usage = db_usage
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(db_usage['models_defined'])} –º–æ–¥–µ–ª–µ–π –ë–î")
        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(db_usage['query_locations'])} –º–µ—Å—Ç —Å SQL –∑–∞–ø—Ä–æ—Å–∞–º–∏")
    
    def _generate_recommendations(self, report: ProjectAnalysisReport):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º—É –∫–æ–¥—É
        if report.unused_modules:
            recommendations.append(
                f"üóëÔ∏è  –£–¥–∞–ª–∏—Ç—å {len(report.unused_modules)} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
            )
        
        if report.unused_imports:
            total_unused = sum(len(v) for v in report.unused_imports.values())
            recommendations.append(
                f"üßπ –û—á–∏—Å—Ç–∏—Ç—å {total_unused} –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ {len(report.unused_imports)} —Ñ–∞–π–ª–∞—Ö"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        if report.circular_dependencies:
            recommendations.append(
                f"‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ù–û: –£—Å—Ç—Ä–∞–Ω–∏—Ç—å {len(report.circular_dependencies)} —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        if report.complexity_hotspots:
            top_complex = report.complexity_hotspots[0]
            recommendations.append(
                f"üìä –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –º–æ–¥—É–ª—è '{top_complex[0]}' (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {top_complex[1]})"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ë–î
        if len(report.database_usage.get("query_locations", [])) > 5:
            recommendations.append(
                "üíæ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ DAL (Data Access Layer) –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î"
            )
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report.total_lines > 10000:
            recommendations.append(
                "üì¶ –ü—Ä–æ–µ–∫—Ç –±–æ–ª—å—à–æ–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–æ–¥–ø–∞–∫–µ—Ç—ã"
            )
        
        report.recommendations = recommendations
    
    def _print_report(self, report: ProjectAnalysisReport):
        """–í—ã–≤–µ—Å—Ç–∏ –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print(f"\n{Colors.CYAN}{'=' * 100}{Colors.ENDC}")
        print(f"{Colors.BOLD}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê{Colors.ENDC}".center(100))
        print(f"{Colors.CYAN}{'=' * 100}{Colors.ENDC}\n")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"{Colors.BOLD}üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.ENDC}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {report.total_files}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {report.total_modules}")
        print(f"  ‚Ä¢ –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {report.total_lines}")
        print(f"  ‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {report.total_functions}")
        print(f"  ‚Ä¢ –ö–ª–∞—Å—Å–æ–≤: {report.total_classes}")
        print(f"  ‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {len(report.dependency_graph.edges) if report.dependency_graph else 0}")
        
        # –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥
        if report.unused_modules or report.unused_imports:
            print(f"\n{Colors.YELLOW}üóëÔ∏è  –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–¥:{Colors.ENDC}")
            if report.unused_modules:
                print(f"  ‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π: {len(report.unused_modules)}")
                for module in report.unused_modules[:5]:
                    print(f"    - {module}")
                if len(report.unused_modules) > 5:
                    print(f"    ... –∏ –µ—â—ë {len(report.unused_modules) - 5}")
            
            if report.unused_imports:
                print(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏: {len(report.unused_imports)}")
        
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if report.circular_dependencies:
            print(f"\n{Colors.RED}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:{Colors.ENDC}")
            for i, cycle in enumerate(report.circular_dependencies[:3], 1):
                print(f"  {i}. {' ‚Üí '.join(cycle)}")
            if len(report.circular_dependencies) > 3:
                print(f"  ... –∏ –µ—â—ë {len(report.circular_dependencies) - 3}")
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        if report.complexity_hotspots:
            print(f"\n{Colors.BLUE}üìä –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:{Colors.ENDC}")
            for i, (module, complexity) in enumerate(report.complexity_hotspots[:5], 1):
                print(f"  {i}. {module} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity})")
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        if report.database_usage:
            print(f"\n{Colors.GREEN}üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:{Colors.ENDC}")
            print(f"  ‚Ä¢ –ú–æ–¥–µ–ª–µ–π: {len(report.database_usage.get('models_defined', []))}")
            print(f"  ‚Ä¢ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤: {len(report.database_usage.get('query_locations', []))} —Ñ–∞–π–ª–∞—Ö")
            print(f"  ‚Ä¢ ORM –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤: {len(report.database_usage.get('orm_usage', []))} —Ñ–∞–π–ª–∞—Ö")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report.recommendations:
            print(f"\n{Colors.BOLD}{Colors.CYAN}üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Colors.ENDC}")
            for rec in report.recommendations:
                print(f"  {rec}")
        
        print(f"\n{Colors.CYAN}{'=' * 100}{Colors.ENDC}\n")
    
    def _save_report(self, report: ProjectAnalysisReport):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –≤ JSON —Ñ–∞–π–ª"""
        try:
            logs_dir = self.project_root / "logs"
            logs_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            report_path = logs_dir / f"project_analysis_{timestamp}.json"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(report.to_json())
            
            print(f"{Colors.GREEN}üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}{Colors.ENDC}\n")
        except Exception as e:
            print(f"{Colors.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}{Colors.ENDC}\n")


# Global instance
_last_analysis_report: Optional[ProjectAnalysisReport] = None


def analyze_project(project_root: Optional[Path] = None) -> ProjectAnalysisReport:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
    global _last_analysis_report
    
    if project_root is None:
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        current_file = Path(__file__)
        project_root = current_file.parent.parent.parent  # Server/
    
    analyzer = ProjectAnalyzer(project_root)
    _last_analysis_report = analyzer.analyze()
    return _last_analysis_report


def get_last_analysis_report() -> Optional[ProjectAnalysisReport]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç –∞–Ω–∞–ª–∏–∑–∞"""
    return _last_analysis_report


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyze_project()
