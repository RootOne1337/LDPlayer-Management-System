"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è FastAPI endpoints —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –≤ —Ä–æ—É—Ç—ã.
"""

from typing import Dict, Optional
from fastapi import Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

from ..core.config import get_config, SystemConfig
from ..remote.workstation import WorkstationManager
from ..remote.ldplayer_manager import LDPlayerManager
from ..utils.logger import get_logger, LogCategory
from ..utils.jwt_auth import JWTManager, User, Token, get_current_user, get_current_admin


# –ú–µ–Ω–µ–¥–∂–µ—Ä—ã (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
workstation_managers: Dict[str, WorkstationManager] = {}
ldplayer_managers: Dict[str, LDPlayerManager] = {}

# JWT Manager
jwt_manager = JWTManager()

# Security
security = HTTPBearer(auto_error=False)


async def get_system_config() -> SystemConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã.
    
    Returns:
        SystemConfig: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    """
    return get_config()


def get_workstation_manager(workstation_id: str, 
                            config: SystemConfig = Depends(get_system_config)) -> WorkstationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    Args:
        workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã

    Returns:
        WorkstationManager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

    Raises:
        HTTPException: –ï—Å–ª–∏ —Ä–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    workstation_config = None

    for ws in config.workstations:
        if ws.id == workstation_id:
            workstation_config = ws
            break

    if not workstation_config:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è {workstation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )

    if workstation_id not in workstation_managers:
        workstation_managers[workstation_id] = WorkstationManager(workstation_config)

    return workstation_managers[workstation_id]


def get_ldplayer_manager(workstation_id: str) -> LDPlayerManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LDPlayer –¥–ª—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    Args:
        workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

    Returns:
        LDPlayerManager: –ú–µ–Ω–µ–¥–∂–µ—Ä LDPlayer
    """
    if workstation_id not in ldplayer_managers:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        # –°–æ–∑–¥–∞—ë–º WorkstationManager –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –≤—ã–∑–æ–≤–∞ get_workstation_manager
        workstation_config = None
        for ws in config.workstations:
            if ws.id == workstation_id:
                workstation_config = ws
                break
        
        if not workstation_config:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è {workstation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
        
        workstation_manager = WorkstationManager(workstation_config)
        ldplayer_managers[workstation_id] = LDPlayerManager(workstation_manager)

    return ldplayer_managers[workstation_id]


async def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω.

    Args:
        credentials: HTTP Authorization credentials (Bearer token)

    Returns:
        str: Username –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω

    Raises:
        HTTPException: –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    """
    if credentials is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Missing authorization header",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å JWT —Ç–æ–∫–µ–Ω
        payload = jwt_manager.verify_token(credentials.credentials)
        username: str = payload.get("sub")
        
        if username is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token payload",
            )
        
        return username
        
    except HTTPException:
        raise
    except (ValueError, TypeError, KeyError) as e:
        logger_api.log_error(f"Token validation error - invalid data: {e}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=f"Invalid token data: {str(e)}",
        )
    except Exception as e:
        logger_api.log_error(f"Token validation error - unexpected: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token validation failed",
        )


def get_logger_dependency(category: LogCategory = LogCategory.API):
    """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è endpoint'–∞.

    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    Returns:
        Logger: –õ–æ–≥–≥–µ—Ä
    """
    return get_logger(category)


# ============================================================================
# UTILITY DECORATORS - Reduce Code Duplication
# ============================================================================

from functools import wraps
from typing import Callable, Any


def handle_api_errors(logger_category: LogCategory = LogCategory.API):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ API endpoints.
    
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ HTTPException —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏.
    
    Args:
        logger_category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Example:
        @router.get("/example")
        @handle_api_errors(LogCategory.EMULATOR)
        async def example_endpoint():
            # Your code here
            pass
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs) -> Any:
            logger = get_logger(logger_category)
            try:
                return await func(*args, **kwargs)
            except HTTPException:
                # Re-raise HTTPExceptions as-is (already have correct status codes)
                raise
            except ValueError as e:
                # Validation errors ‚Üí 400 Bad Request
                logger.log_error(f"Validation error in {func.__name__}: {e}")
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Invalid input: {str(e)}"
                )
            except PermissionError as e:
                # Permission errors ‚Üí 403 Forbidden
                logger.log_error(f"Permission denied in {func.__name__}: {e}")
                raise HTTPException(
                    status_code=status.HTTP_403_FORBIDDEN,
                    detail=f"Permission denied: {str(e)}"
                )
            except ConnectionError as e:
                # Network errors ‚Üí 503 Service Unavailable
                logger.log_error(f"Connection error in {func.__name__}: {e}")
                raise HTTPException(
                    status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                    detail=f"Service temporarily unavailable: {str(e)}"
                )
            except TimeoutError as e:
                # Timeout errors ‚Üí 504 Gateway Timeout
                logger.log_error(f"Timeout in {func.__name__}: {e}")
                raise HTTPException(
                    status_code=status.HTTP_504_GATEWAY_TIMEOUT,
                    detail=f"Operation timeout: {str(e)}"
                )
            except Exception as e:
                # All other errors ‚Üí 500 Internal Server Error
                logger.log_error(f"Unexpected error in {func.__name__}: {e}", exc_info=True)
                raise HTTPException(
                    status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                    detail=f"Internal server error: {str(e)}"
                )
        return wrapper
    return decorator


def validate_workstation_exists(config: SystemConfig, workstation_id: str) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.
    
    Args:
        config: –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        
    Raises:
        HTTPException: 404 –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    ws_exists = any(ws.id == workstation_id for ws in config.workstations)
    if not ws_exists:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Workstation '{workstation_id}' not found"
        )


def validate_emulator_name(name: str) -> None:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞.
    
    Args:
        name: –ò–º—è —ç–º—É–ª—è—Ç–æ—Ä–∞
        
    Raises:
        ValueError: –ï—Å–ª–∏ –∏–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
    """
    if not name or len(name.strip()) == 0:
        raise ValueError("Emulator name cannot be empty")
    
    if len(name) > 100:
        raise ValueError("Emulator name too long (max 100 characters)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    invalid_chars = ['<', '>', ':', '"', '/', '\\', '|', '?', '*']
    if any(char in name for char in invalid_chars):
        raise ValueError(f"Emulator name contains invalid characters: {', '.join(invalid_chars)}")


# ============================================================================
# üÜï DI –ö–û–ù–¢–ï–ô–ù–ï–† –ó–ê–í–ò–°–ò–ú–û–°–¢–ò (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
# ============================================================================

async def get_workstation_service() -> "WorkstationService":
    """–ü–æ–ª—É—á–∏—Ç—å WorkstationService –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    
    üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è FastAPI dependency injection –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.
    """
    from ..core.container import container
    from ..services.workstation_service import WorkstationService
    
    service = container.get("workstation_service")
    if not service:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="WorkstationService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        )
    return service


async def get_emulator_service() -> "EmulatorService":
    """–ü–æ–ª—É—á–∏—Ç—å EmulatorService –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    
    üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è FastAPI dependency injection –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞.
    """
    from ..core.container import container
    from ..services.emulator_service import EmulatorService
    
    service = container.get("emulator_service")
    if not service:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="EmulatorService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        )
    return service


async def get_ldplayer_manager_di() -> "LDPlayerManager":
    """–ü–æ–ª—É—á–∏—Ç—å LDPlayerManager –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    
    üÜï –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è FastAPI dependency injection –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö.
    """
    from ..core.container import container
    
    manager = container.get("ldplayer_manager")
    if not manager:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="LDPlayerManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        )
    return manager
