"""
API —Ä–æ—É—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.
"""

import os
from typing import List, Dict, Any, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from pydantic import BaseModel, Field

from ..core.models import EmulatorConfig, Emulator, OperationType
from ..core.config import get_system_config, SystemConfig
from .dependencies import get_emulator_service, verify_token  # üÜï Updated import location
from ..utils.logger import get_logger, LogCategory
from ..utils.mock_data import get_mock_emulators, get_mock_emulator
from ..services.emulator_service import EmulatorService  # üÜï New service
from ..utils.validators import validate_pagination_params, validate_emulator_name, validate_emulator_config  # ‚úÖ NEW
from ..utils.constants import ErrorMessage, OperationStatus  # ‚úÖ NEW


router = APIRouter(prefix="/api/emulators", tags=["emulators"])
logger = get_logger(LogCategory.EMULATOR)


class EmulatorCreateRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞."""
    workstation_id: str = Field(..., min_length=1)
    name: str = Field(..., min_length=1, max_length=100)
    config: Optional[Dict[str, Any]] = None


class EmulatorActionRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–º—É–ª—è—Ç–æ—Ä–æ–º."""
    workstation_id: str = Field(..., min_length=1)
    name: str = Field(..., min_length=1)


class EmulatorRenameRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞."""
    workstation_id: str = Field(..., min_length=1)
    old_name: str = Field(..., min_length=1)
    new_name: str = Field(..., min_length=1)


class APIResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API."""
    success: bool
    message: str
    data: Any = None
    error: str = None


@router.get("")
async def get_all_emulators(
    skip: int = 0,
    limit: int = 100,
    service: EmulatorService = Depends(get_emulator_service)
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        skip: –°–∫–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
        limit: –ú–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100, –º–∞–∫—Å–∏–º—É–º 1000)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Å–ø–∏—Å–∫–æ–º —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        skip, limit = validate_pagination_params(skip, limit)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        emulators, _ = await service.get_all(limit=limit + skip, offset=0)
        
        # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        total_count = len(emulators)
        paginated = emulators[skip : skip + limit]
        
        return {
            "data": [emu.to_dict() for emu in paginated],
            "pagination": {
                "total": total_count,
                "skip": skip,
                "limit": limit,
                "returned": len(paginated),
                "has_more": (skip + limit) < total_count
            }
        }
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {str(e)}"
        )


@router.post("", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def create_emulator(
    request: EmulatorCreateRequest,
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–º—É–ª—è—Ç–æ—Ä.
    
    Args:
        request: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞
        current_user: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        
    Returns:
        APIResponse —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
        
    Raises:
        HTTPException: 404 –µ—Å–ª–∏ —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, 400 –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, 500 –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –°–æ–∑–¥–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        new_emu = await service.create({
            "workstation_id": request.workstation_id,
            "name": request.name,
            "config": request.config or {}
        })

        logger.log_system_event(
            f"–°–æ–∑–¥–∞–Ω —ç–º—É–ª—è—Ç–æ—Ä '{request.name}'",
            {
                "workstation_id": request.workstation_id,
                "emulator_name": request.name,
                "emulator_id": new_emu.id
            }
        )

        return APIResponse(
            success=True,
            message=f"–≠–º—É–ª—è—Ç–æ—Ä '{request.name}' —Å–æ–∑–¥–∞–Ω",
            data=new_emu.to_dict()
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{request.name}': {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {str(e)}"
        )


@router.get("/{emulator_id}")
async def get_emulator(
    emulator_id: str,
    service: EmulatorService = Depends(get_emulator_service)
) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ."""
    try:
        emu = await service.get_by_id(emulator_id)
        
        if not emu:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        return emu.to_dict()
    except HTTPException:
        raise
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ {emulator_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {str(e)}"
        )


@router.post("/{emulator_id}/start", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def start_emulator(
    emulator_id: str,
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä."""
    try:
        logger.log_system_event(
            f"–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}'",
            {"emulator_id": emulator_id}
        )
        
        # Call real service method to queue operation
        result = await service.start(emulator_id)
        
        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data=result
        )

    except HTTPException:
        raise
    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@router.post("/{emulator_id}/stop", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def stop_emulator(
    emulator_id: str,
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä."""
    try:
        logger.log_system_event(
            f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}'",
            {"emulator_id": emulator_id}
        )
        
        # Call real service method to queue operation
        result = await service.stop(emulator_id)
        
        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data=result
        )

    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@router.delete("/{emulator_id}", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def delete_emulator(
    emulator_id: str,
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–£–¥–∞–ª–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä."""
    try:
        logger.log_system_event(
            f"–£–¥–∞–ª–µ–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}'",
            {"emulator_id": emulator_id}
        )
        
        # Call real service method to queue operation
        result = await service.delete(emulator_id)
        
        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator_id}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data=result
        )

    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@router.post("/rename", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def rename_emulator(
    request: EmulatorRenameRequest,
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —ç–º—É–ª—è—Ç–æ—Ä."""
    try:
        logger.log_system_event(
            f"–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{request.old_name}' -> '{request.new_name}'",
            {"workstation_id": request.workstation_id}
        )
        
        # Call real service method to queue operation
        result = await service.rename(request.old_name, request.new_name)
        
        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ —Å '{request.old_name}' –Ω–∞ '{request.new_name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data=result
        )

    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@router.post("/batch-start", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def batch_start_emulators(
    workstation_id: str,
    emulator_names: List[str],
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."""
    try:
        logger.log_system_event(
            f"Batch –∑–∞–ø—É—Å–∫ {len(emulator_names)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤",
            {"workstation_id": workstation_id, "count": len(emulator_names)}
        )
        
        # Call real service method to queue batch operation
        result = await service.batch_start(emulator_names)
        
        return APIResponse(
            success=True,
            message=f"–ó–∞–ø—É—â–µ–Ω–æ {len(emulator_names)} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø—É—Å–∫–∞",
            data=result
        )

    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ batch –∑–∞–ø—É—Å–∫–∞: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )


@router.post("/batch-stop", response_model=APIResponse, status_code=status.HTTP_202_ACCEPTED)
async def batch_stop_emulators(
    workstation_id: str,
    emulator_names: List[str],
    service: EmulatorService = Depends(get_emulator_service),
    current_user: str = Depends(verify_token)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ."""
    try:
        logger.log_system_event(
            f"Batch –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {len(emulator_names)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤",
            {"workstation_id": workstation_id, "count": len(emulator_names)}
        )
        
        # Call real service method to queue batch operation
        result = await service.batch_stop(emulator_names)
        
        return APIResponse(
            success=True,
            message=f"–ó–∞–ø—É—â–µ–Ω–æ {len(emulator_names)} –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
            data=result
        )

    except Exception as e:
        logger.log_error(f"–û—à–∏–±–∫–∞ batch –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=str(e)
        )
