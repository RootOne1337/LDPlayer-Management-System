"""
–ú–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.

–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–±–æ—á–∏–º —Å—Ç–∞–Ω—Ü–∏—è–º,
–ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.

SECURITY PATCH v2.0:
- –í—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
- –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ startup –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –ù–∏–∫–∞–∫–∏—Ö –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π –∏–ª–∏ –∫–ª—é—á–µ–π
"""

import os
import json
from typing import Dict, List, Optional
from dataclasses import dataclass, field
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass  # python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω


@dataclass
class ServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
    host: str = "0.0.0.0"
    port: int = 8000
    debug: bool = True
    reload: bool = True

    # WebSocket –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    websocket_port: int = 8001

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_level: str = "INFO"
    log_file: str = "logs/server.log"

    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    database_url: str = "sqlite:///./ldplayer_manager.db"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø –ò–ó .env (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ä—É–π!)
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ load_config() - –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    secret_key: str = os.getenv("JWT_SECRET_KEY", "")  # –ü–£–°–¢–û - –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ –Ω–µ –≤ .env!
    access_token_expire_minutes: int = 30


@dataclass
class WorkstationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏."""
    id: str
    name: str
    ip_address: str
    username: str = "administrator"
    password: str = ""  # –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø –ò–ó .env - —Å–º. load_config()
    domain: str = ""

    # LDPlayer –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ldplayer_path: str = r"C:\LDPlayer\LDPlayer9.0"
    ldconsole_path: str = r"C:\LDPlayer\LDPlayer9.0\ldconsole.exe"
    configs_path: str = r"C:\LDPlayer\LDPlayer9.0\customizeConfigs"

    # –°–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    smb_enabled: bool = True
    powershell_remoting_enabled: bool = True
    winrm_port: int = 5985

    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoring_enabled: bool = True
    monitoring_interval: int = 30  # —Å–µ–∫—É–Ω–¥—ã

    # –°—Ç–∞—Ç—É—Å
    status: str = "unknown"
    last_seen: Optional[str] = None
    
    # –≠–º—É–ª—è—Ç–æ—Ä—ã (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
    emulators: List[Dict] = field(default_factory=list)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    total_emulators: int = 0
    active_emulators: int = 0
    cpu_usage: float = 0.0
    memory_usage: float = 0.0
    disk_usage: float = 0.0


@dataclass
class SystemConfig:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    server: ServerConfig = field(default_factory=ServerConfig)
    workstations: List[WorkstationConfig] = field(default_factory=list)

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    base_dir: Path = field(default_factory=lambda: Path(__file__).parent.parent.parent)
    configs_dir: Path = field(default_factory=lambda: Path(__file__).parent.parent.parent / "configs")
    logs_dir: Path = field(default_factory=lambda: Path(__file__).parent.parent.parent / "logs")
    backups_dir: Path = field(default_factory=lambda: Path(__file__).parent.parent.parent / "backups")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    backup_enabled: bool = True
    backup_interval: int = 3600  # —Å–µ–∫—É–Ω–¥—ã
    max_backups: int = 10

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    global_monitoring: bool = True
    alert_thresholds: Dict[str, float] = field(default_factory=lambda: {
        "cpu_usage": 80.0,
        "memory_usage": 85.0,
        "disk_usage": 90.0
    })


class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã."""

    def __init__(self, config_file: str = "config.json"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config_file = Path(__file__).parent.parent.parent / config_file
        self._config: Optional[SystemConfig] = None

    def load_config(self) -> SystemConfig:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.

        Returns:
            SystemConfig: –û–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        """
        if self._config is not None:
            return self._config

        # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self._ensure_directories()

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self._config = self._from_dict(data)
            except (json.JSONDecodeError, KeyError) as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                self._config = self._create_default_config()
        else:
            self._config = self._create_default_config()
            self.save_config()

        return self._config

    def save_config(self) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
        if self._config is None:
            return

        self._ensure_directories()

        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self._to_dict(self._config), f, indent=2, ensure_ascii=False)
        except (IOError, OSError) as e:
            from ..core.exceptions import FileWriteError
            logger.error(f"Failed to save config: {e}")
            raise FileWriteError(f"Failed to save configuration: {str(e)}", 
                               details={"file": self.config_file, "error": str(e)})
        except (TypeError, ValueError) as e:
            from ..core.exceptions import ConfigException
            logger.error(f"Failed to serialize config: {e}")
            raise ConfigException(f"Configuration serialization failed: {str(e)}")

    def _create_default_config(self) -> SystemConfig:
        """
        –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        
        üîê SECURITY PATCH v2.0:
        –ü–∞—Ä–æ–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env —Ñ–∞–π–ª–∞).
        –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ startup –Ω–µ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.
        """
        # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ä–∞–±–æ—á–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏
        workstations = [
            WorkstationConfig(
                id="ws_001",
                name="–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è 1",
                ip_address="192.168.1.101",
                username="administrator",
                password=os.getenv("WS_001_PASSWORD", "")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env
            ),
            WorkstationConfig(
                id="ws_002",
                name="–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è 2",
                ip_address="192.168.1.102",
                username="administrator",
                password=os.getenv("WS_002_PASSWORD", "")  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ .env
            )
        ]

        return SystemConfig(
            server=ServerConfig(),
            workstations=workstations
        )

    def _to_dict(self, config: SystemConfig) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "server": {
                "host": config.server.host,
                "port": config.server.port,
                "debug": config.server.debug,
                "reload": config.server.reload,
                "websocket_port": config.server.websocket_port,
                "log_level": config.server.log_level,
                "log_file": config.server.log_file,
                "database_url": config.server.database_url,
                "secret_key": config.server.secret_key,
                "access_token_expire_minutes": config.server.access_token_expire_minutes
            },
            "workstations": [
                {
                    "id": ws.id,
                    "name": ws.name,
                    "ip_address": ws.ip_address,
                    "username": ws.username,
                    "password": ws.password,
                    "domain": ws.domain,
                    "ldplayer_path": ws.ldplayer_path,
                    "ldconsole_path": ws.ldconsole_path,
                    "configs_path": ws.configs_path,
                    "smb_enabled": ws.smb_enabled,
                    "powershell_remoting_enabled": ws.powershell_remoting_enabled,
                    "winrm_port": ws.winrm_port,
                    "monitoring_enabled": ws.monitoring_enabled,
                    "monitoring_interval": ws.monitoring_interval,
                    "status": ws.status,
                    "last_seen": ws.last_seen
                }
                for ws in config.workstations
            ],
            "system": {
                "base_dir": str(config.base_dir),
                "configs_dir": str(config.configs_dir),
                "logs_dir": str(config.logs_dir),
                "backups_dir": str(config.backups_dir),
                "backup_enabled": config.backup_enabled,
                "backup_interval": config.backup_interval,
                "max_backups": config.max_backups,
                "global_monitoring": config.global_monitoring,
                "alert_thresholds": config.alert_thresholds
            }
        }

    def _from_dict(self, data: dict) -> SystemConfig:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å–ª–æ–≤–∞—Ä—è."""
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        server_data = data.get("server", {})
        server = ServerConfig(**server_data)

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
        workstations_data = data.get("workstations", [])
        workstations = [
            WorkstationConfig(**ws_data) for ws_data in workstations_data
        ]

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        system_data = data.get("system", {})

        return SystemConfig(
            server=server,
            workstations=workstations,
            base_dir=Path(system_data.get("base_dir", "")),
            configs_dir=Path(system_data.get("configs_dir", "")),
            logs_dir=Path(system_data.get("logs_dir", "")),
            backups_dir=Path(system_data.get("backups_dir", "")),
            backup_enabled=system_data.get("backup_enabled", True),
            backup_interval=system_data.get("backup_interval", 3600),
            max_backups=system_data.get("max_backups", 10),
            global_monitoring=system_data.get("global_monitoring", True),
            alert_thresholds=system_data.get("alert_thresholds", {})
        )

    def _ensure_directories(self) -> None:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        directories = [
            self._config.base_dir if self._config else Path(__file__).parent.parent.parent,
            Path(__file__).parent.parent.parent / "configs",
            Path(__file__).parent.parent.parent / "logs",
            Path(__file__).parent.parent.parent / "backups"
        ]

        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)

    def get_workstation(self, workstation_id: str) -> Optional[WorkstationConfig]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ ID.

        Args:
            workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

        Returns:
            WorkstationConfig –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        config = self.load_config()
        for workstation in config.workstations:
            if workstation.id == workstation_id:
                return workstation
        return None

    def add_workstation(self, workstation: WorkstationConfig) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.

        Args:
            workstation: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        """
        config = self.load_config()
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å—Ç–∞–Ω—Ü–∏—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        for existing in config.workstations:
            if existing.id == workstation.id:
                raise ValueError(f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å ID {workstation.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        config.workstations.append(workstation)
        self.save_config()

    def remove_workstation(self, workstation_id: str) -> None:
        """–£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        Args:
            workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        config = self.load_config()
        config.workstations = [
            ws for ws in config.workstations
            if ws.id != workstation_id
        ]
        self.save_config()

    def update_workstation(self, workstation: WorkstationConfig) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

        Args:
            workstation: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        """
        config = self.load_config()
        for i, existing in enumerate(config.workstations):
            if existing.id == workstation.id:
                config.workstations[i] = workstation
                break
        self.save_config()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_manager = ConfigManager()


def validate_security_configuration() -> None:
    """
    üîê –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ù–ê STARTUP
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞.
    –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - —Å–µ—Ä–≤–µ—Ä –ù–ï –ó–ê–ü–£–°–¢–ò–¢–°–Ø!
    
    Raises:
        RuntimeError: –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    """
    errors = []
    
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: JWT Secret Key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–µ –±—ã—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º
    jwt_secret = os.getenv("JWT_SECRET_KEY", "").strip()
    if not jwt_secret:
        errors.append(
            "‚ùå CRITICAL: JWT_SECRET_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ!\n"
            "   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á: python -c \"import secrets; print(secrets.token_urlsafe(32))\"\n"
            "   –î–æ–±–∞–≤—å –≤ .env: JWT_SECRET_KEY=<—Ç–≤–æ–π_–∫–ª—é—á>"
        )
    elif jwt_secret == "your-secret-key-change-in-production":
        errors.append(
            "‚ùå CRITICAL: JWT_SECRET_KEY - —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
            "   –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∫–ª—é—á –∏ –æ–±–Ω–æ–≤–∏ .env —Ñ–∞–π–ª."
        )
    elif len(jwt_secret) < 32:
        errors.append(
            f"‚ùå WARNING: JWT_SECRET_KEY —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(jwt_secret)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
            "   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞."
        )
    
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ü–∞—Ä–æ–ª–∏ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
    config = get_config()
    for ws in config.workstations:
        if not ws.password or ws.password.strip() == "":
            errors.append(
                f"‚ùå CRITICAL: –†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è '{ws.name}' (ID: {ws.id}) –Ω–µ –∏–º–µ–µ—Ç –ø–∞—Ä–æ–ª—è!\n"
                f"   –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–∞—Ä–æ–ª—å –≤ .env: WS_{ws.id.upper()}_PASSWORD=<–ø–∞—Ä–æ–ª—å>"
            )
        elif len(ws.password) < 8:
            errors.append(
                f"‚ö†Ô∏è  WARNING: –ü–∞—Ä–æ–ª—å —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ '{ws.name}' —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(ws.password)} —Å–∏–º–≤–æ–ª–æ–≤)\n"
                f"   –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤."
            )
    
    # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: Database URL –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π
    db_url = os.getenv("DATABASE_URL", "").strip()
    if not db_url:
        errors.append(
            "‚ùå WARNING: DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ!\n"
            "   –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: sqlite:///./ldplayer_manager.db"
        )
    
    # üö® –ï—Å–ª–∏ –µ—Å—Ç—å CRITICAL –æ—à–∏–±–∫–∏ - –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    critical_errors = [e for e in errors if "CRITICAL" in e]
    warnings = [e for e in errors if "WARNING" in e]
    
    if critical_errors:
        print("\n" + "="*80)
        print("üö® SECURITY VALIDATION FAILED - CRITICAL ERRORS FOUND")
        print("="*80)
        for error in critical_errors:
            print(error)
        print("="*80)
        raise RuntimeError("Security validation failed. Server cannot start.")
    
    # ‚ö†Ô∏è –í—ã–≤–æ–¥–∏–º warning'–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if warnings:
        print("\n" + "="*80)
        print("‚ö†Ô∏è  SECURITY VALIDATION - WARNINGS")
        print("="*80)
        for warning in warnings:
            print(warning)
        print("="*80)
    
    print("‚úÖ Security validation passed!")


def get_config() -> SystemConfig:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã.

    Returns:
        SystemConfig: –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    """
    return config_manager.load_config()


# Alias –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API –º–æ–¥—É–ª—è–º–∏
get_system_config = get_config


def reload_config() -> SystemConfig:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞.

    Returns:
        SystemConfig: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    """
    config_manager._config = None
    return config_manager.load_config()