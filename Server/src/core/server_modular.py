"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.

–ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ API —Ä–æ—É—Ç–∞–º–∏.
"""

import asyncio
import json
from datetime import datetime
from typing import List
from pathlib import Path

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

from .config import get_config
from .models import WorkstationStatus
from ..api import (
    health_router,
    workstations_router,
    emulators_router,
    operations_router
)
from ..api.dependencies import workstation_managers, ldplayer_managers
from ..remote.workstation import WorkstationMonitor
from ..remote.protocols import connection_pool
from ..utils.logger import get_logger, LogCategory
from ..utils.secrets_manager import ConfigEncryption


# Logger
logger = get_logger(LogCategory.SYSTEM)

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="LDPlayer Management System API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(health_router)
app.include_router(workstations_router)
app.include_router(emulators_router)
app.include_router(operations_router)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
monitor: WorkstationMonitor = None
websocket_connections: List[WebSocket] = []


# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket."""
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç."""
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        """–û—Ç–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)

    async def broadcast(self, message: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        if not self.active_connections:
            return

        message_json = json.dumps(message, default=str, ensure_ascii=False)

        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_text(message_json)
            except Exception:
                disconnected.append(connection)

        # –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
websocket_manager = WebSocketManager()


async def broadcast_websocket_event(event_type: str, data: dict):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket.

    Args:
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    """
    event = {
        "type": event_type,
        "data": data,
        "timestamp": datetime.now().isoformat()
    }

    await websocket_manager.broadcast(event)


# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    await websocket_manager.connect(websocket)

    try:
        while True:
            # –û–∂–∏–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()

            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                message = json.loads(data)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            except json.JSONDecodeError:
                pass

    except WebSocketDisconnect:
        websocket_manager.disconnect(websocket)


# –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
async def start_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π."""
    global monitor

    config = get_config()
    managers = []

    # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
    for ws_config in config.workstations:
        from ..remote.workstation import WorkstationManager
        if ws_config.id not in workstation_managers:
            workstation_managers[ws_config.id] = WorkstationManager(ws_config)
        managers.append(workstation_managers[ws_config.id])

    if managers:
        monitor = WorkstationMonitor(managers)
        await monitor.start_monitoring()
        logger.log_system_event("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –∑–∞–ø—É—â–µ–Ω", {"count": len(managers)})


async def stop_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π."""
    global monitor

    if monitor:
        await monitor.stop_monitoring()
        monitor = None
        logger.log_system_event("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {})


async def start_operation_processors():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    for ws_id, ldplayer_manager in ldplayer_managers.items():
        asyncio.create_task(ldplayer_manager.start_operation_processor())
        logger.log_system_event(
            f"–ó–∞–ø—É—â–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ç–∞–Ω—Ü–∏–∏ {ws_id}",
            {"workstation_id": ws_id}
        )


# Lifecycle —Å–æ–±—ã—Ç–∏—è
@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    import os
    
    logger.log_system_event("üöÄ –ó–∞–ø—É—Å–∫ LDPlayer Management System Server", {})

    try:
        # ===== –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ =====
        config_path = Path("config.json")
        encrypted_config_path = Path("config.encrypted.json")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
        if config_path.exists():
            logger.log_system_event("üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", {})
            try:
                config_encryptor = ConfigEncryption(str(config_path))
                
                # –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥
                config_encryptor.encrypt_config(str(encrypted_config_path))
                logger.log_system_event(
                    "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                    {"encrypted_config": str(encrypted_config_path)}
                )
                
                # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                os.environ["ENCRYPTED_CONFIG"] = str(encrypted_config_path)
                
            except Exception as e:
                logger.log_system_event(
                    f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}",
                    {"error": str(e)}
                )
        
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        logger.log_system_event(
            f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(config.workstations)} —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π",
            {"workstations_count": len(config.workstations)}
        )

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–ë–ï–ó —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
        dev_mode = os.getenv("DEV_MODE", "false").lower() == "true"
        
        if not dev_mode:
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–µ)
            await start_monitoring()

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
            await start_operation_processors()
            
            logger.log_system_event("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º", {})
        else:
            logger.log_system_event("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ DEV —Ä–µ–∂–∏–º–µ (–ë–ï–ó –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)", {})

    except Exception as e:
        logger.log_system_event(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}", {"error": str(e)})
        raise


@app.on_event("shutdown")
async def shutdown_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    logger.log_system_event("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ LDPlayer Management System Server", {})

    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await stop_monitoring()

        # –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_pool.cleanup()

        # –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for ws in websocket_manager.active_connections:
            await ws.close()

        logger.log_system_event("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", {})

    except Exception as e:
        logger.log_system_event(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}", {"error": str(e)})


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def run_server(host: str = "0.0.0.0", port: int = 8000, reload: bool = False, ssl_certfile: str = None, ssl_keyfile: str = None):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.

    Args:
        host: –•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        reload: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
        ssl_certfile: –ü—É—Ç—å –¥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        ssl_keyfile: –ü—É—Ç—å –¥–æ SSL –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    """
    uvicorn.run(
        app,
        host=host,
        port=port,
        reload=reload,
        log_level="info",
        ssl_certfile=ssl_certfile,
        ssl_keyfile=ssl_keyfile
    )


if __name__ == "__main__":
    config = get_config()
    run_server(
        host=config.server.host,
        port=config.server.port,
        reload=config.server.reload
    )
