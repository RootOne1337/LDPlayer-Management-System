"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ —Å—Ç–∞–Ω—Ü–∏—è–º–∏ –∏ —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏,
–∞ —Ç–∞–∫–∂–µ WebSocket –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.
"""

import asyncio
import json
import os
import time
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect, Depends, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import uvicorn

from ..core.config import get_config, config_manager, SystemConfig, WorkstationConfig
from ..core.models import (
    Workstation,  WorkstationStatus,
    Emulator, EmulatorConfig, EmulatorStatus,
    Operation, OperationType, OperationStatus
)
from ..remote.workstation import WorkstationManager, WorkstationMonitor
from ..remote.ldplayer_manager import LDPlayerManager
from ..remote.protocols import connection_pool
from ..api.auth_routes import router as auth_router, get_current_active_user  # JWT Authentication + dependency
from ..utils.auth import require_role  # Auth helpers
from ..utils.cache import get_cache_stats, invalidate_cache  # üöÄ Performance caching
from ..core.models import UserInDB, UserRole  # User models for type hints (import after existing models)
from ..utils.detailed_logging import (  # –°–≤–µ—Ä—Ö –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_http_request, 
    log_http_response, 
    log_authentication_attempt,
    log_permission_check,
    log_workstation_connection,
    log_emulator_operation
)
from ..utils.logger import get_logger, LogCategory

# üÜï –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–µ–º–µ–¥–∏–∞—Ü–∏–∏
from ..core.container import container, DIContainer  # DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
from ..models.entities import Workstation as WsEntity, Emulator as EmEntity  # Domain entities
from ..models.schemas import PaginatedResponse, PaginationParams  # API schemas
from ..services.workstation_service import WorkstationService  # Business logic
from ..services.emulator_service import EmulatorService  # Business logic
from ..utils.exceptions import (  # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    LDPlayerManagementException,
    EmulatorNotFoundError,
    WorkstationNotFoundError,
    InvalidInputError
)


# üÜï DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (–≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
# –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–¥–µ—Å—å –∏ –∏–Ω—ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ Depends()

# ‚ö†Ô∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –∫—ç—à–µ–π –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:
# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –≠—Ç–∏ —Å–ª–æ–≤–∞—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤. –í –±—É–¥—É—â–µ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
# TODO: –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ DIContainer (–∏–∑ container.py) –¥–ª—è –∑–∞–º–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
workstation_managers: Dict[str, WorkstationManager] = {}
ldplayer_managers: Dict[str, LDPlayerManager] = {}

monitor: Optional[WorkstationMonitor] = None
websocket_connections: List[WebSocket] = []


def initialize_di_services() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
    
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ startup –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    logger = get_logger(LogCategory.SYSTEM)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        config = get_config()
        
        # –°–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏
        workstation_manager = WorkstationManager(config)
        container.register("workstation_manager", workstation_manager)
        
        # –°–æ–∑–¥–∞—Ç—å LDPlayer –º–µ–Ω–µ–¥–∂–µ—Ä (–æ—Å–Ω–æ–≤–Ω–æ–π, –Ω–∞ localhost)
        ldplayer_manager = LDPlayerManager(workstation_manager)
        container.register("ldplayer_manager", ldplayer_manager)
        logger.log_system_event("LDPlayerManager initialized")
        
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
        ws_service = WorkstationService(ldplayer_manager)
        container.register("workstation_service", ws_service)
        logger.log_system_event("WorkstationService initialized")
        
        em_service = EmulatorService(ldplayer_manager)
        container.register("emulator_service", em_service)
        logger.log_system_event("EmulatorService initialized")
        
    except Exception as e:
        error_logger = get_logger(LogCategory.SYSTEM)
        error_logger.log_error(e, "Failed to initialize DI services")
        raise


# ============================================================================
# üÜï –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ src/api/dependencies.py
# –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
# - get_workstation_service()
# - get_emulator_service()
# - get_ldplayer_manager_di()
# ============================================================================


# Lifecycle —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º lifespan
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    logger = get_logger(LogCategory.SYSTEM)
    
    # ============ STARTUP ============
    print("[STARTUP] LDPlayer Management System Server")
    logger.log_system_event("Starting LDPlayer Management System")
    
    # üÜï Start tracking server uptime
    from .uptime import start_uptime_tracking
    start_uptime_tracking()
    logger.log_system_event("Uptime tracking started")
    
    # üîê –í–ê–õ–ò–î–ê–¶–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ù–ê STARTUP (PHASE 1 - HOTFIX)
    try:
        from .config import validate_security_configuration
        validate_security_configuration()
        logger.log_system_event("‚úÖ Security validation passed")
    except RuntimeError as e:
        logger.log_error(e, "Security validation failed - startup blocked")
        raise
    except Exception as e:
        logger.log_error(e, "Unexpected error during security validation")
        raise
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏
    try:
        initialize_di_services()
        logger.log_system_event("DI container initialized")
    except Exception as e:
        logger.log_error(e, "Failed to initialize DI container")
        raise
    
    print("[OK] Server started successfully")
    
    # ============ APPLICATION RUNNING ============
    yield
    
    # ============ SHUTDOWN ============
    print("[SHUTDOWN] LDPlayer Management System Server")
    logger.log_system_event("Shutting down LDPlayer Management System")
    
    try:
        # –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ cleanup() –≤ DIContainer –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        logger.log_system_event("DI container resources cleaned up")
    except Exception as e:
        logger.log_error(e, "Failed to cleanup resources")
    
    print("[OK] Server stopped successfully")


# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="LDPlayer Management System API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–µ–±-–∫–ª–∏–µ–Ω—Ç–æ–≤
# –í–ê–ñ–ù–û: –í production —É–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã!
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:5173",  # Vite dev server
        "http://127.0.0.1:5173",
        "http://localhost:8001",
        "http://127.0.0.1:8001",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ============================================================================
# –°–í–ï–†–• –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• HTTP –ó–ê–ü–†–û–°–û–í
# ============================================================================

@app.middleware("http")
async def log_requests_middleware(request, call_next):
    """Middleware –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    from datetime import datetime
    import json as json_lib
    
    start_time = datetime.now()
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    user = "anonymous"
    try:
        auth_header = request.headers.get("authorization", "")
        if auth_header:
            user = "authenticated"
    except Exception:
        pass
    
    # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    body = {}
    try:
        if request.method in ["POST", "PUT", "PATCH"]:
            body_bytes = await request.body()
            if body_bytes:
                try:
                    body = json_lib.loads(body_bytes.decode())
                except (ValueError, UnicodeDecodeError):
                    body = {"raw": body_bytes.decode()[:500]}
    except Exception:
        pass
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    log_http_request({
        "method": request.method,
        "url": str(request.url.path),
        "query_params": dict(request.query_params),
        "headers": dict(request.headers),
        "body": body,
        "client_ip": request.client.host if request.client else "unknown",
        "user": user
    })
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
    try:
        response = await call_next(request)
        
        # –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        log_http_response({
            "status_code": response.status_code,
            "duration_ms": duration_ms,
            "headers": dict(response.headers)
        })
        
        return response
        
    except Exception as e:
        duration_ms = (datetime.now() - start_time).total_seconds() * 1000
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger = get_logger(LogCategory.API)
        logger.logger.error(
            f"‚ùå HTTP REQUEST FAILED | {request.method} {request.url.path} | "
            f"duration={duration_ms:.2f}ms | error={type(e).__name__}: {str(e)}"
        )
        
        raise


# Include routers
app.include_router(auth_router, prefix="/api")

# Import and include other routers
from ..api.workstations import router as workstations_router
from ..api.emulators import router as emulators_router
from ..api.operations import router as operations_router
from ..api.health import router as health_router

app.include_router(workstations_router, prefix="/api/workstations", tags=["Workstations"])
app.include_router(emulators_router, prefix="/api/emulators", tags=["Emulators"])
app.include_router(operations_router, prefix="/api/operations", tags=["Operations"])
app.include_router(health_router, prefix="/api", tags=["Health"])


# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API

class ServerStatus(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    status: str
    version: str
    uptime: str
    connected_workstations: int
    total_emulators: int
    active_operations: int
    timestamp: str


class APIResponse(BaseModel):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API."""
    success: bool
    message: str
    data: Optional[Any] = None
    error: Optional[str] = None


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

async def get_system_config() -> SystemConfig:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã."""
    return get_config()


# WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä

class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""

    def __init__(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket."""
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç."""
        await websocket.accept()
        self.active_connections.append(websocket)
        websocket_connections.append(websocket)

    def disconnect(self, websocket: WebSocket) -> None:
        """–û—Ç–∫–ª—é—á–∏—Ç—å WebSocket –∫–ª–∏–µ–Ω—Ç."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
        if websocket in websocket_connections:
            websocket_connections.remove(websocket)

    async def broadcast(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º."""
        if not self.active_connections:
            return

        message_json = json.dumps(message, default=str, ensure_ascii=False)

        disconnected = []
        for connection in self.active_connections:
            try:
                await connection.send_text(message_json)
            except Exception:
                disconnected.append(connection)

        # –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for connection in disconnected:
            self.disconnect(connection)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
websocket_manager = WebSocketManager()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def get_workstation_manager(workstation_id: str) -> WorkstationManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    Args:
        workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

    Returns:
        WorkstationManager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

    Raises:
        HTTPException: –ï—Å–ª–∏ —Ä–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    config = get_config()
    workstation_config = None

    for ws in config.workstations:
        if ws.id == workstation_id:
            workstation_config = ws
            break

    if not workstation_config:
        raise HTTPException(
            status_code=404,
            detail=f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è {workstation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )

    if workstation_id not in workstation_managers:
        workstation_managers[workstation_id] = WorkstationManager(workstation_config)

    return workstation_managers[workstation_id]


def get_ldplayer_manager(workstation_id: str) -> LDPlayerManager:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LDPlayer –¥–ª—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏.

    Args:
        workstation_id: ID —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏

    Returns:
        LDPlayerManager: –ú–µ–Ω–µ–¥–∂–µ—Ä LDPlayer
    """
    if workstation_id not in ldplayer_managers:
        workstation_manager = get_workstation_manager(workstation_id)
        ldplayer_managers[workstation_id] = LDPlayerManager(workstation_manager)

    return ldplayer_managers[workstation_id]


async def broadcast_websocket_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket.

    Args:
        event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
        data: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    """
    event = {
        "type": event_type,
        "data": data,
        "timestamp": datetime.now().isoformat()
    }

    await websocket_manager.broadcast(event)


# Serve static files and web UI
@app.get("/")
async def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    try:
        static_dir = Path(__file__).parent.parent.parent / "static"
        index_file = static_dir / "index.html"
        if index_file.exists():
            return FileResponse(str(index_file), media_type="text/html")
    except Exception as e:
        print(f"Error serving index: {e}")
    return {"message": "Welcome to LDPlayer Management System"}


# Mount static files directory
try:
    static_dir = Path(__file__).parent.parent.parent / "static"
    if static_dir.exists():
        app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")
except Exception as e:
    print(f"Error mounting static files: {e}")


# API endpoints

@app.get("/api/health", response_model=APIResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
    return APIResponse(
        success=True,
        message="–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
        data={"status": "healthy"}
    )


@app.get("/api/status", response_model=ServerStatus)
async def get_server_status(current_user: UserInDB = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    config = get_config()

    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    connected_workstations = len([
        ws for ws in config.workstations
        if ws.status == WorkstationStatus.ONLINE
    ])

    total_emulators = sum(
        len(get_ldplayer_manager(ws.id).get_emulators())
        for ws in config.workstations
    )

    active_operations = sum(
        len(get_ldplayer_manager(ws.id).get_active_operations())
        for ws in config.workstations
    )

    return ServerStatus(
        status="running",
        version="1.0.0",
        uptime="0:00:00",  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç uptime
        connected_workstations=connected_workstations,
        total_emulators=total_emulators,
        active_operations=active_operations,
        timestamp=datetime.now().isoformat()
    )


def _get_workstations_list() -> List[Dict[str, Any]]:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π (–¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    config = get_config()
    workstations_data = []
    
    for ws_config in config.workstations:
        # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status_str = ws_config.status

        # Handle last_seen - can be str (from config) or datetime (from model)
        last_seen_str = None
        if ws_config.last_seen:
            if isinstance(ws_config.last_seen, str):
                last_seen_str = ws_config.last_seen
            else:
                last_seen_str = ws_config.last_seen.isoformat() if hasattr(ws_config.last_seen, 'isoformat') else str(ws_config.last_seen)

        workstations_data.append({
            "id": ws_config.id,
            "name": ws_config.name,
            "ip_address": ws_config.ip_address,
            "status": status_str,
            "total_emulators": ws_config.total_emulators,
            "active_emulators": ws_config.active_emulators,
            "cpu_usage": ws_config.cpu_usage,
            "memory_usage": ws_config.memory_usage,
            "disk_usage": ws_config.disk_usage,
            "last_seen": last_seen_str
        })
    
    return workstations_data


@app.get("/api/workstations", response_model=List[Dict[str, Any]])
async def get_workstations(current_user: UserInDB = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ (–∫—ç—à –Ω–∞ 30 —Å–µ–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
    return _get_workstations_list()


@app.post("/api/workstations", response_model=APIResponse, status_code=201)
async def add_workstation(
    workstation_data: Dict[str, Any],
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        name = workstation_data.get("name", "").strip()
        if not name:
            raise ValueError("name is required and cannot be empty")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º id, –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
        if "id" not in workstation_data or not workstation_data["id"]:
            workstation_data["id"] = f"ws_{name.lower().replace(' ', '_')}_{int(time.time())}"
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: ip_address –∏–ª–∏ host
        ip_address = workstation_data.get("ip_address") or workstation_data.get("host")
        if not ip_address:
            raise ValueError("ip_address or host is required")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Ä—Ç–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã)
        if "port" in workstation_data:
            port = workstation_data.get("port")
            if port is not None:
                try:
                    port_num = int(port)
                    if port_num < 1 or port_num > 65535:
                        raise ValueError(f"port must be between 1 and 65535, got {port_num}")
                except (ValueError, TypeError) as e:
                    raise ValueError(f"Invalid port: {e}")
        
        workstation_config = WorkstationConfig(
            id=workstation_data["id"],
            name=name,
            ip_address=ip_address,
            username=workstation_data.get("username", "administrator"),
            password=workstation_data["password"]
        )

        config_manager.add_workstation(workstation_config)
        
        # üöÄ –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
        invalidate_cache(pattern="workstations")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await broadcast_websocket_event("workstation_added", {
            "workstation_id": workstation_config.id,
            "name": workstation_config.name,
            "ip_address": workstation_config.ip_address
        })

        return APIResponse(
            success=True,
            message=f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è {workstation_config.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            data={"id": workstation_config.id, "workstation_id": workstation_config.id}
        )

    except ValueError as e:
        raise HTTPException(status_code=422, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/workstations/{workstation_id}", response_model=Dict[str, Any])
async def get_workstation(
    workstation_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    manager = get_workstation_manager(workstation_id)

    # –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    system_info = manager.get_system_info()

    return {
        "id": manager.config.id,
        "name": manager.config.name,
        "ip_address": manager.config.ip_address,
        "status": manager.config.status.value if hasattr(manager.config.status, 'value') else str(manager.config.status),
        "system_info": system_info,
        "emulators": [emu.to_dict() for emu in manager.get_emulators_list()]
    }


@app.post("/api/workstations/{workstation_id}/test-connection", response_model=APIResponse)
async def test_workstation_connection(
    workstation_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    manager = get_workstation_manager(workstation_id)

    success, message = manager.test_connection()

    if success:
        return APIResponse(success=True, message=message)
    else:
        raise HTTPException(status_code=400, detail=message)


@app.get("/api/workstations/{workstation_id}/emulators", response_model=List[Dict[str, Any]])
async def get_workstation_emulators(
    workstation_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    manager = get_ldplayer_manager(workstation_id)
    emulators = manager.get_emulators()

    return [emu.to_dict() for emu in emulators]


@app.post("/api/emulators", response_model=APIResponse)
async def create_emulator(
    emulator_data: Dict[str, Any],
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–º—É–ª—è—Ç–æ—Ä. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    try:
        workstation_id = emulator_data["workstation_id"]
        name = emulator_data["name"]

        # –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LDPlayer
        ldplayer_manager = get_ldplayer_manager(workstation_id)

        # –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —ç–º—É–ª—è—Ç–æ—Ä–∞
        config_data = emulator_data.get("config", {})
        config = EmulatorConfig(
            android_version=config_data.get("android_version", "9.0"),
            screen_size=config_data.get("screen_size", "1280x720"),
            cpu_cores=config_data.get("cpu_cores", 2),
            memory_mb=config_data.get("memory_mb", 2048)
        )

        # –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
        operation = ldplayer_manager.create_emulator(name, config)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await broadcast_websocket_event("emulator_creating", {
            "operation_id": operation.id,
            "emulator_name": name,
            "workstation_id": workstation_id
        })

        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data={
                "operation_id": operation.id,
                "emulator_name": name,
                "workstation_id": workstation_id
            }
        )

    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/api/emulators/{emulator_id}/start", response_model=APIResponse)
async def start_emulator(
    emulator_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    try:
        # –ù–∞–π—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
        config = get_config()
        emulator = None
        ldplayer_manager = None

        for ws_config in config.workstations:
            ldplayer_manager = get_ldplayer_manager(ws_config.id)
            emulators = ldplayer_manager.get_emulators()

            for emu in emulators:
                if emu.id == emulator_id:
                    emulator = emu
                    break

            if emulator:
                break

        if not emulator:
            raise HTTPException(status_code=404, detail=f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∑–∞–ø—É—Å–∫–∞
        operation = ldplayer_manager.start_emulator(emulator.name)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await broadcast_websocket_event("emulator_starting", {
            "operation_id": operation.id,
            "emulator_id": emulator_id,
            "emulator_name": emulator.name
        })

        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator.name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data={"operation_id": operation.id}
        )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


@app.post("/api/emulators/{emulator_id}/stop", response_model=APIResponse)
async def stop_emulator(
    emulator_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    try:
        # –ù–∞–π—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
        config = get_config()
        emulator = None
        ldplayer_manager = None

        for ws_config in config.workstations:
            ldplayer_manager = get_ldplayer_manager(ws_config.id)
            emulators = ldplayer_manager.get_emulators()

            for emu in emulators:
                if emu.id == emulator_id:
                    emulator = emu
                    break

            if emulator:
                break

        if not emulator:
            raise HTTPException(status_code=404, detail=f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        operation = ldplayer_manager.stop_emulator(emulator.name)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await broadcast_websocket_event("emulator_stopping", {
            "operation_id": operation.id,
            "emulator_id": emulator_id,
            "emulator_name": emulator.name
        })

        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator.name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data={"operation_id": operation.id}
        )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


@app.delete("/api/emulators/{emulator_id}", response_model=APIResponse)
async def delete_emulator(
    emulator_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–£–¥–∞–ª–∏—Ç—å —ç–º—É–ª—è—Ç–æ—Ä. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    try:
        # –ù–∞–π—Ç–∏ —ç–º—É–ª—è—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
        config = get_config()
        emulator = None
        ldplayer_manager = None

        for ws_config in config.workstations:
            ldplayer_manager = get_ldplayer_manager(ws_config.id)
            emulators = ldplayer_manager.get_emulators()

            for emu in emulators:
                if emu.id == emulator_id:
                    emulator = emu
                    break

            if emulator:
                break

        if not emulator:
            raise HTTPException(status_code=404, detail=f"–≠–º—É–ª—è—Ç–æ—Ä {emulator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        operation = ldplayer_manager.delete_emulator(emulator.name)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ WebSocket
        await broadcast_websocket_event("emulator_deleting", {
            "operation_id": operation.id,
            "emulator_id": emulator_id,
            "emulator_name": emulator.name
        })

        return APIResponse(
            success=True,
            message=f"–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ '{emulator.name}' –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å",
            data={"operation_id": operation.id}
        )

    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


@app.get("/api/operations", response_model=List[Dict[str, Any]])
async def get_operations(current_user: UserInDB = Depends(get_current_active_user)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    operations_data = []

    for ldplayer_manager in ldplayer_managers.values():
        for operation in ldplayer_manager.get_active_operations():
            operations_data.append({
                "id": operation.id,
                "type": operation.type.value,
                "emulator_id": operation.emulator_id,
                "workstation_id": operation.workstation_id,
                "status": operation.status.value,
                "created_at": operation.created_at.isoformat(),
                "started_at": operation.started_at.isoformat() if operation.started_at else None,
                "completed_at": operation.completed_at.isoformat() if operation.completed_at else None,
                "result": operation.result,
                "error_message": operation.error_message
            })

    return operations_data


@app.get("/api/operations/{operation_id}", response_model=Dict[str, Any])
async def get_operation(
    operation_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    for ldplayer_manager in ldplayer_managers.values():
        operation = ldplayer_manager.get_operation(operation_id)
        if operation:
            return {
                "id": operation.id,
                "type": operation.type.value,
                "emulator_id": operation.emulator_id,
                "workstation_id": operation.workstation_id,
                "status": operation.status.value,
                "created_at": operation.created_at.isoformat(),
                "started_at": operation.started_at.isoformat() if operation.started_at else None,
                "completed_at": operation.completed_at.isoformat() if operation.completed_at else None,
                "result": operation.result,
                "error_message": operation.error_message
            }

    raise HTTPException(status_code=404, detail=f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@app.post("/api/operations/{operation_id}/cancel", response_model=APIResponse)
async def cancel_operation(
    operation_id: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å OPERATOR –∏–ª–∏ ADMIN."""
    require_role(current_user, UserRole.OPERATOR)
    
    for ldplayer_manager in ldplayer_managers.values():
        if ldplayer_manager.cancel_operation(operation_id):
            await broadcast_websocket_event("operation_cancelled", {
                "operation_id": operation_id
            })
            return APIResponse(
                success=True,
                message=f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –æ—Ç–º–µ–Ω–µ–Ω–∞"
            )

    raise HTTPException(status_code=404, detail=f"–û–ø–µ—Ä–∞—Ü–∏—è {operation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


# WebSocket endpoint

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π."""
    await websocket_manager.connect(websocket)

    try:
        while True:
            # –û–∂–∏–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()

            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                message = json.loads(data)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            except json.JSONDecodeError:
                pass

    except WebSocketDisconnect:
        websocket_manager.disconnect(websocket)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞



# ============================================================================
# üöÄ PERFORMANCE MONITORING ENDPOINTS
# ============================================================================

@app.get("/api/performance/cache-stats", response_model=Dict[str, Any])
async def get_cache_statistics(
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    require_role(current_user, UserRole.ADMIN)
    
    stats = get_cache_stats()
    return {
        "status": "success",
        "cache_stats": stats,
        "timestamp": datetime.now().isoformat()
    }


@app.post("/api/performance/cache-clear", response_model=APIResponse)
async def clear_cache(
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å ADMIN."""
    require_role(current_user, UserRole.ADMIN)
    
    invalidate_cache(pattern=None)  # –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
    
    return APIResponse(
        success=True,
        message="–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω",
        data={"cleared_at": datetime.now().isoformat()}
    )


@app.post("/api/performance/cache-invalidate", response_model=APIResponse)
async def invalidate_cache_endpoint(
    pattern: str,
    current_user: UserInDB = Depends(get_current_active_user)
):
    """–ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å ADMIN."""
    require_role(current_user, UserRole.ADMIN)
    
    if not pattern:
        raise HTTPException(
            status_code=400,
            detail="Pattern cannot be empty"
        )
    
    invalidate_cache(pattern=pattern)
    
    return APIResponse(
        success=True,
        message=f"–ö—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}",
        data={"pattern": pattern, "invalidated_at": datetime.now().isoformat()}
    )


@app.get("/api/performance/metrics", response_model=Dict[str, Any])
async def get_performance_metrics(
    current_user: UserInDB = Depends(get_current_active_user)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
    - Cache hit rate
    - Number of cached items
    - Workstation managers count
    - Active WebSocket connections
    """
    require_role(current_user, UserRole.ADMIN)
    
    cache_stats = get_cache_stats()
    
    return {
        "status": "success",
        "metrics": {
            "cache": {
                "hit_rate_percent": cache_stats.get('hit_rate_percent', 0),
                "total_hits": cache_stats.get('hits', 0),
                "total_misses": cache_stats.get('misses', 0),
                "evictions": cache_stats.get('evictions', 0),
                "cached_items": cache_stats.get('size', 0)
            },
            "managers": {
                "workstations": len(workstation_managers),
                "ldplayers": len(ldplayer_managers)
            },
            "websockets": {
                "active_connections": len(websocket_connections)
            }
        },
        "timestamp": datetime.now().isoformat()
    }


def run_server(host: str = "0.0.0.0", port: int = 8000, reload: bool = False):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.

    Args:
        host: –•–æ—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        reload: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤
    """
    uvicorn.run(
        "src.core.server:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )


if __name__ == "__main__":
    run_server()
