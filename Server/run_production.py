#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ LDPlayer Management System Server (Production Ready Version).

–ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ API —Ä–æ—É—Ç–∞–º–∏.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

try:
    from src.core.server_modular import app, run_server
    from src.core.config import get_config
    from src.utils.logger import get_logger, LogCategory
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: pip install -r requirements.txt")
    sys.exit(1)


def generate_self_signed_cert():
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å self-signed SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    cert_file = Path("cert.pem")
    key_file = Path("key.pem")
    
    if cert_file.exists() and key_file.exists():
        return str(cert_file), str(key_file)
    
    print("üîê –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ self-signed SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...")
    try:
        from cryptography import x509
        from cryptography.x509.oid import NameOID
        from cryptography.hazmat.primitives import hashes
        from cryptography.hazmat.backends import default_backend
        from cryptography.hazmat.primitives.asymmetric import rsa
        from cryptography.hazmat.primitives import serialization
        from datetime import datetime, timedelta
        import ipaddress
        
        # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
            backend=default_backend()
        )
        
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subject = issuer = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, u"RU"),
            x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, u"Moscow"),
            x509.NameAttribute(NameOID.LOCALITY_NAME, u"Moscow"),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, u"LDPlayer"),
            x509.NameAttribute(NameOID.COMMON_NAME, u"localhost"),
        ])
        
        cert = x509.CertificateBuilder().subject_name(
            subject
        ).issuer_name(
            issuer
        ).public_key(
            private_key.public_key()
        ).serial_number(
            x509.random_serial_number()
        ).not_valid_before(
            datetime.utcnow()
        ).not_valid_after(
            datetime.utcnow() + timedelta(days=365)
        ).add_extension(
            x509.SubjectAlternativeName([
                x509.DNSName(u"localhost"),
                x509.DNSName(u"127.0.0.1"),
                x509.IPAddress(ipaddress.IPv4Address(u"127.0.0.1")),
            ]),
            critical=False,
        ).sign(
            private_key, hashes.SHA256(), default_backend()
        )
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á
        with open(cert_file, "wb") as f:
            f.write(cert.public_bytes(serialization.Encoding.PEM))
        
        with open(key_file, "wb") as f:
            f.write(private_key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.TraditionalOpenSSL,
                encryption_algorithm=serialization.NoEncryption()
            ))
        
        print("‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return str(cert_file), str(key_file)
        
    except ImportError:
        print("‚ö†Ô∏è  cryptography –º–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install cryptography")
        print("   –ó–∞–ø—É—Å–∫ –±–µ–∑ HTTPS...")
        return None, None
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        print("   –ó–∞–ø—É—Å–∫ –±–µ–∑ HTTPS...")
        return None, None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    print("=" * 60)
    print("üöÄ LDPlayer Management System Server")
    print("   Version: 1.0.0 (Production Ready)")
    print("   Date: October 17, 2025")
    print("=" * 60)
    print()

    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = get_config()
        
        print("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"   –•–æ—Å—Ç: {config.server.host}")
        print(f"   –ü–æ—Ä—Ç: {config.server.port}")
        print(f"   –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {config.server.debug}")
        print(f"   –†–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: {len(config.workstations)}")
        print()

        # –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
        if config.workstations:
            print("üè≠ –†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏:")
            for i, ws in enumerate(config.workstations[:5], 1):
                print(f"   {i}. {ws.name} ({ws.ip_address})")
            if len(config.workstations) > 5:
                print(f"   ... –∏ –µ—â–µ {len(config.workstations) - 5}")
            print()

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        ssl_certfile, ssl_keyfile = generate_self_signed_cert()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ
        print("üåê –î–æ—Å—Ç—É–ø –∫ API:")
        protocol = "https" if ssl_certfile else "http"
        ws_protocol = "wss" if ssl_certfile else "ws"
        
        print(f"   API Docs (Swagger): {protocol}://{config.server.host}:{config.server.port}/docs")
        print(f"   API Docs (ReDoc):   {protocol}://{config.server.host}:{config.server.port}/redoc")
        print(f"   WebSocket:          {ws_protocol}://{config.server.host}:{config.server.port}/ws")
        print()

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
        print("üì° –û—Å–Ω–æ–≤–Ω—ã–µ endpoints:")
        print(f"   GET  /api/health            - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
        print(f"   GET  /api/status            - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞")
        print(f"   GET  /api/workstations      - –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω—Ü–∏–π")
        print(f"   GET  /api/emulators         - –í—Å–µ —ç–º—É–ª—è—Ç–æ—Ä—ã")
        print(f"   GET  /api/operations        - –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        print()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        print("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:")
        print(f"   POST /auth/login            - –ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω")
        print(f"   POST /auth/refresh          - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω")
        print(f"   GET  /auth/me               - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print()

        print("‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        print("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        print("=" * 60)
        print()

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —Å HTTPS –µ—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å—Ç—å
        if ssl_certfile and ssl_keyfile:
            print(f"üîí HTTPS –≤–∫–ª—é—á–µ–Ω (cert: {ssl_certfile}, key: {ssl_keyfile})")
            run_server(
                host=config.server.host,
                port=config.server.port,
                reload=config.server.reload,
                ssl_certfile=ssl_certfile,
                ssl_keyfile=ssl_keyfile
            )
        else:
            print("‚ö†Ô∏è  HTTPS –Ω–µ –≤–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTTP")
            run_server(
                host=config.server.host,
                port=config.server.port,
                reload=config.server.reload
            )

    except KeyboardInterrupt:
        print("\n\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
