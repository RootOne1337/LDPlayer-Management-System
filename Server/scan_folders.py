#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–æ–∫ LDPlayer –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤—Å–µ—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤—ã–≤–æ–¥ ldconsole.
"""

import os
import json
from pathlib import Path
from typing import List, Dict, Any

def scan_ldplayer_folders(ldplayer_path: str = r"C:\LDPlayer\LDPlayer9") -> Dict[str, Any]:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫–∏ LDPlayer –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–æ–≤.
    
    Args:
        ldplayer_path: –ü—É—Ç—å –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ LDPlayer
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
    """
    print("üîç –î–ï–¢–ê–õ–¨–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ü–ê–ü–û–ö LDPLAYER")
    print("=" * 70)
    
    result = {
        "ldplayer_path": ldplayer_path,
        "exists": False,
        "vms_folder": None,
        "emulators": [],
        "config_files": []
    }
    
    ldpath = Path(ldplayer_path)
    
    if not ldpath.exists():
        print(f"‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ldplayer_path}")
        return result
    
    result["exists"] = True
    print(f"‚úÖ –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ldplayer_path}\n")
    
    # 1. –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–∞—à–∏–Ω–∞–º–∏
    print("üìÅ –®–ê–ì 1: –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏")
    print("-" * 70)
    
    possible_vm_folders = ["vms", "VirtualBox VMs", "VMs"]
    vms_path = None
    
    for folder in possible_vm_folders:
        test_path = ldpath / folder
        if test_path.exists():
            vms_path = test_path
            result["vms_folder"] = str(test_path)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ VMs: {test_path}")
            break
    
    if not vms_path:
        # –ü–æ–∏—Å–∫ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        parent = ldpath.parent
        for folder in possible_vm_folders:
            test_path = parent / folder
            if test_path.exists():
                vms_path = test_path
                result["vms_folder"] = str(test_path)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ VMs (–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π): {test_path}")
                break
    
    if not vms_path:
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å VMs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º...")
    
    # 2. –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    print("\nüìÅ –®–ê–ì 2: –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
    print("-" * 70)
    
    config_folders = []
    
    # 2.1 –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–ø–∫–∞ configs
    configs_path = ldpath / "vms" / "config"
    if configs_path.exists():
        config_folders.append(configs_path)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ configs: {configs_path}")
    
    # 2.2 –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø–∞–ø–∫–∞ leidian
    leidian_path = ldpath / "vms" / "leidian"
    if leidian_path.exists():
        config_folders.append(leidian_path)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ leidian: {leidian_path}")
    
    # 2.3 –ü—Ä—è–º–æ –≤ vms
    vms_direct = ldpath / "vms"
    if vms_direct.exists():
        config_folders.append(vms_direct)
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∞–ø–∫—É vms: {vms_direct}")
    
    if not config_folders:
        print("‚ö†Ô∏è –ü–∞–ø–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # 3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    print("\nüìÑ –®–ê–ì 3: –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ .config")
    print("-" * 70)
    
    config_files = []
    
    for config_folder in config_folders:
        if not config_folder.exists():
            continue
            
        print(f"\n   –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {config_folder}")
        
        # –ü–æ–∏—Å–∫ .config —Ñ–∞–π–ª–æ–≤
        for item in config_folder.rglob("*.config"):
            config_files.append(item)
            result["config_files"].append(str(item))
            print(f"      üìÑ –ù–∞–π–¥–µ–Ω: {item.name}")
    
    print(f"\n   –í—Å–µ–≥–æ .config —Ñ–∞–π–ª–æ–≤: {len(config_files)}")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
    print("\nüî¨ –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("-" * 70)
    
    emulators = []
    
    for config_file in config_files:
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑: {config_file.name}")
        
        try:
            # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            emulator_info = {
                "config_file": str(config_file),
                "name": None,
                "properties": {}
            }
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ INI/properties
            lines = content.split('\n')
            for line in lines:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip().strip('"')
                    
                    emulator_info["properties"][key] = value
                    
                    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
                    if key.lower() in ['statusSettings.playerName'.lower(), 'name', 'vmname']:
                        emulator_info["name"] = value
                        print(f"   ‚úÖ –ò–º—è —ç–º—É–ª—è—Ç–æ—Ä–∞: {value}")
                    
                    if key.lower() in ['resolution.width', 'width']:
                        print(f"   üìê –®–∏—Ä–∏–Ω–∞: {value}")
                    
                    if key.lower() in ['resolution.height', 'height']:
                        print(f"   üìê –í—ã—Å–æ—Ç–∞: {value}")
                    
                    if key.lower() in ['propertySettings.phoneMemory'.lower(), 'memory']:
                        print(f"   üíæ –ü–∞–º—è—Ç—å: {value} MB")
                    
                    if key.lower() in ['propertySettings.phoneCPUCores'.lower(), 'cpucores']:
                        print(f"   üñ•Ô∏è CPU —è–¥–µ—Ä: {value}")
            
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            if not emulator_info["name"]:
                emulator_info["name"] = config_file.stem
                print(f"   ‚ÑπÔ∏è –ò–º—è –∏–∑ —Ñ–∞–π–ª–∞: {emulator_info['name']}")
            
            emulators.append(emulator_info)
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    result["emulators"] = emulators
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ldconsole
    print("\n" + "=" * 70)
    print("üîß –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ldconsole.exe")
    print("=" * 70)
    
    ldconsole_path = ldpath / "ldconsole.exe"
    if ldconsole_path.exists():
        print(f"‚úÖ ldconsole –Ω–∞–π–¥–µ–Ω: {ldconsole_path}")
        
        try:
            import subprocess
            result_cmd = subprocess.run(
                [str(ldconsole_path), "list"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result_cmd.returncode == 0:
                lines = result_cmd.stdout.strip().split('\n')
                ldconsole_emulators = [line.strip() for line in lines[1:] if line.strip()]
                
                print(f"\nüìã ldconsole –≤–µ—Ä–Ω—É–ª {len(ldconsole_emulators)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
                for emu in ldconsole_emulators:
                    print(f"   - {emu}")
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–æ —Ñ–∞–π–ª–∞–º
                file_names = {e["name"] for e in emulators if e["name"]}
                ldconsole_names = set(ldconsole_emulators)
                
                print(f"\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:")
                print(f"   –ü–æ —Ñ–∞–π–ª–∞–º: {len(file_names)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
                print(f"   –ü–æ ldconsole: {len(ldconsole_names)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
                
                only_in_files = file_names - ldconsole_names
                only_in_ldconsole = ldconsole_names - file_names
                
                if only_in_files:
                    print(f"\n   ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª–∞—Ö: {only_in_files}")
                
                if only_in_ldconsole:
                    print(f"\n   ‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤ ldconsole: {only_in_ldconsole}")
                
                if file_names == ldconsole_names:
                    print(f"\n   ‚úÖ –ü–æ–ª–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ldconsole: {e}")
    else:
        print(f"‚ö†Ô∏è ldconsole –Ω–µ –Ω–∞–π–¥–µ–Ω: {ldconsole_path}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    print(f"\n‚úÖ LDPlayer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ldplayer_path}")
    if result["vms_folder"]:
        print(f"‚úÖ –ü–∞–ø–∫–∞ VMs: {result['vms_folder']}")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ .config —Ñ–∞–π–ª–æ–≤: {len(config_files)}")
    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {len(emulators)}")
    
    if emulators:
        print(f"\nüìã –°–ü–ò–°–û–ö –≠–ú–£–õ–Ø–¢–û–†–û–í:")
        for i, emu in enumerate(emulators, 1):
            print(f"\n{i}. {emu['name']}")
            print(f"   –ö–æ–Ω—Ñ–∏–≥: {Path(emu['config_file']).name}")
            if emu['properties']:
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                key_props = ['resolution.width', 'resolution.height', 
                           'propertySettings.phoneMemory', 'propertySettings.phoneCPUCores']
                for prop in key_props:
                    if prop in emu['properties']:
                        print(f"   {prop}: {emu['properties'][prop]}")
    
    return result


if __name__ == "__main__":
    try:
        result = scan_ldplayer_folders()
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        output_file = Path(__file__).parent / "scan_result.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
