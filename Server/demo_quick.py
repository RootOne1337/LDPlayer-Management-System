#!/usr/bin/env python3
"""Quick demo of LDPlayer Management System API"""

import requests
import json

BASE = 'http://127.0.0.1:8000/api/v1'

print('\n' + '='*70)
print('üöÄ  LDPlayer Management System - API Demo')
print('='*70)

# Step 1: Login
print('\nüîê 1. –ü–û–õ–£–ß–ê–ï–ú JWT –¢–û–ö–ï–ù')
print('-'*70)

login_response = requests.post(f'{BASE}/auth/login', json={
    'username': 'admin',
    'password': 'admin'
})

if login_response.status_code == 200:
    token_data = login_response.json()
    token = token_data['access_token']
    print('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω!')
    print(f'   –¢–æ–∫–µ–Ω: {token[:50]}...')
    print(f'   –†–æ–ª—å: {token_data["user"]["role"]}')
    
    headers = {'Authorization': f'Bearer {token}'}
    
    # Step 2: Get Emulators
    print('\nüì± 2. –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –≠–ú–£–õ–Ø–¢–û–†–û–í')
    print('-'*70)
    
    emul_response = requests.get(f'{BASE}/emulators?skip=0&limit=100', headers=headers)
    
    if emul_response.status_code == 200:
        data = emul_response.json()
        print(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
        print(f'   Success: {data["success"]}')
        print(f'   Message: {data["message"]}')
        print(f'   –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {data["pagination"]["total"]}')
        print(f'   –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data["data"])}')
        
        if data['data']:
            print(f'\n   üìã –ü–µ—Ä–≤—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã (–≤—Å–µ–≥–æ {len(data["data"])}):\n')
            for i, emul in enumerate(data['data'], 1):
                status_icon = '‚ñ∂Ô∏è ' if emul['status'] == 'running' else '‚èπÔ∏è '
                print(f'      {i}. {status_icon}{emul["name"]} (ID: {emul["id"]})')
                print(f'         –°—Ç–∞–Ω—Ü–∏—è: {emul["workstation_id"]}')
                print(f'         –°—Ç–∞—Ç—É—Å: {emul["status"]}')
                print(f'         –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {emul["resolution"]} | DPI: {emul["dpi"]}')
                print(f'         CPU: {emul["cpu_cores"]} cores | RAM: {emul["ram_mb"]}MB')
        else:
            print('\n   ‚ö†Ô∏è  –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞: {emul_response.status_code}')
        print(f'   {emul_response.text}')

    # Step 3: Get Workstations
    print('\n\nüñ•Ô∏è  3. –ü–û–õ–£–ß–ê–ï–ú –†–ê–ë–û–ß–ò–ï –°–¢–ê–ù–¶–ò–ò')
    print('-'*70)
    
    ws_response = requests.get(f'{BASE}/workstations', headers=headers)
    
    if ws_response.status_code == 200:
        data = ws_response.json()
        print(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
        print(f'   –í—Å–µ–≥–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(data["data"])}')
        
        if data['data']:
            print(f'\n   üñ•Ô∏è  –†–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏:\n')
            for i, ws in enumerate(data['data'], 1):
                status_icon = 'üü¢' if ws['status'] == 'online' else 'üî¥'
                print(f'      {i}. {status_icon} {ws["name"]} (ID: {ws["id"]})')
                print(f'         IP: {ws["ip_address"]}')
                print(f'         –°—Ç–∞—Ç—É—Å: {ws["status"]}')
                print(f'         LDPlayer: {ws["ldplayer_path"]}')
        else:
            print('\n   ‚ö†Ô∏è  –°—Ç–∞–Ω—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞: {ws_response.status_code}')

    # Step 4: Health Check
    print('\n\nüíö 4. –ü–†–û–í–ï–†–Ø–ï–ú –ó–î–û–†–û–í–¨–ï –°–ï–†–í–ï–†–ê')
    print('-'*70)
    
    health_response = requests.get('http://127.0.0.1:8000/api/v1/health')
    
    if health_response.status_code == 200:
        health = health_response.json()
        print(f'‚úÖ –°—Ç–∞—Ç—É—Å: {health.get("status", "ok")}')
        print(f'   –í–µ—Ä—Å–∏—è: {health.get("version", "1.0.0")}')
        print(f'   Uptime: {health.get("uptime", "0:00:00")}')
        print(f'   Database: {health.get("database_status", "ok")}')
        print(f'   –†–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: {health.get("workstations_count", "?")}')
        print(f'   –≠–º—É–ª—è—Ç–æ—Ä–æ–≤: {health.get("emulators_count", "?")}')
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞: {health_response.status_code}')

    # Step 5: API Response Model
    print('\n\nüìã 5. –§–û–†–ú–ê–¢ API –û–¢–í–ï–¢–ê (Unified Response Model)')
    print('-'*70)
    print('''
    {
      "success": true,
      "message": "Emulators retrieved successfully",
      "data": [
        {
          "id": "emul_001",
          "name": "Android 11",
          "workstation_id": "ws_001",
          "status": "running",
          "resolution": "720x1280",
          "dpi": 300,
          "cpu_cores": 2,
          "ram_mb": 2048,
          "rom_gb": 10,
          "created_at": "2025-10-19T18:52:26.758953",
          "last_used": "2025-10-19T18:52:26.758953"
        }
      ],
      "pagination": {
        "skip": 0,
        "limit": 10,
        "total": 5,
        "has_more": false,
        "page": 1
      },
      "timestamp": "2025-10-19T18:52:26.758953"
    }
    ''')

else:
    print(f'‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {login_response.status_code}')
    print(f'   {login_response.text}')

print('\n' + '='*70)
print('‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê')
print('='*70)
print('\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost:8000/docs')
print('üîÑ OpenAPI Schema: http://localhost:8000/openapi.json\n')
