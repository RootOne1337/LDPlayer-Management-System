#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ ldconsole list2.
"""

import subprocess
from pathlib import Path
from typing import List, Dict, Any

def parse_ldconsole_list2(ldplayer_path: str = r"C:\LDPlayer\LDPlayer9") -> List[Dict[str, Any]]:
    """–†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã–≤–æ–¥ ldconsole list2.
    
    Args:
        ldplayer_path: –ü—É—Ç—å –∫ LDPlayer
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–º—É–ª—è—Ç–æ—Ä–∞—Ö
    """
    print("üîç –ü–ê–†–°–ò–ù–ì LDCONSOLE LIST2")
    print("=" * 70)
    
    ldconsole = Path(ldplayer_path) / "ldconsole.exe"
    
    if not ldconsole.exists():
        print(f"‚ùå ldconsole –Ω–µ –Ω–∞–π–¥–µ–Ω: {ldconsole}")
        return []
    
    print(f"‚úÖ ldconsole: {ldconsole}\n")
    
    # –í—ã–ø–æ–ª–Ω–∏—Ç—å list2
    try:
        result = subprocess.run(
            [str(ldconsole), "list2"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode != 0:
            print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥ {result.returncode}")
            print(f"STDERR: {result.stderr}")
            return []
        
        output = result.stdout.strip()
        print(f"üìã –í—ã–≤–æ–¥ ldconsole list2:")
        print(f"{output}\n")
        
        # –ü–∞—Ä—Å–∏–Ω–≥
        emulators = []
        lines = output.split('\n')
        
        print(f"üî¨ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫:")
        print("-" * 70)
        
        for i, line in enumerate(lines):
            line = line.strip()
            if not line:
                continue
            
            print(f"\n–°—Ç—Ä–æ–∫–∞ {i}: '{line}'")
            
            # –§–æ—Ä–º–∞—Ç: index,name,topWindowHandle,vBoxWindowHandle,binderWindowHandle,width,height,dpi,vBoxHeadless,vBoxVmSrvPid
            # –ü—Ä–∏–º–µ—Ä: 0,LDPlayer,0,0,0,-1,-1,960,540,160
            parts = line.split(',')
            
            if len(parts) >= 10:
                try:
                    emulator = {
                        'index': int(parts[0]),
                        'name': parts[1],
                        'top_window_handle': int(parts[2]),
                        'vbox_window_handle': int(parts[3]),
                        'binder_window_handle': int(parts[4]),
                        'width': int(parts[5]),
                        'height': int(parts[6]),
                        'resolution_width': int(parts[7]),
                        'resolution_height': int(parts[8]),
                        'dpi': int(parts[9])
                    }
                    
                    emulators.append(emulator)
                    
                    print(f"   ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —ç–º—É–ª—è—Ç–æ—Ä:")
                    print(f"      –ò–Ω–¥–µ–∫—Å: {emulator['index']}")
                    print(f"      –ò–º—è: {emulator['name']}")
                    print(f"      –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {emulator['resolution_width']}x{emulator['resolution_height']}")
                    print(f"      DPI: {emulator['dpi']}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏
                    is_running = (
                        emulator['top_window_handle'] != 0 or
                        emulator['vbox_window_handle'] != 0 or
                        emulator['binder_window_handle'] != 0
                    )
                    emulator['is_running'] = is_running
                    print(f"      –°—Ç–∞—Ç—É—Å: {'üü¢ –ó–ê–ü–£–©–ï–ù' if is_running else '‚ö™ –û–°–¢–ê–ù–û–í–õ–ï–ù'}")
                    
                except (ValueError, IndexError) as e:
                    print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            else:
                print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π ({len(parts)}), –æ–∂–∏–¥–∞–µ—Ç—Å—è >= 10")
        
        print(f"\n{'=' * 70}")
        print(f"üìä –ò–¢–û–ì–û: –Ω–∞–π–¥–µ–Ω–æ {len(emulators)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤")
        print(f"{'=' * 70}")
        
        return emulators
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ldconsole: {e}")
        import traceback
        traceback.print_exc()
        return []


def get_emulator_details(emulator_name: str, ldplayer_path: str = r"C:\LDPlayer\LDPlayer9") -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º—É–ª—è—Ç–æ—Ä–µ.
    
    Args:
        emulator_name: –ò–º—è —ç–º—É–ª—è—Ç–æ—Ä–∞
        ldplayer_path: –ü—É—Ç—å –∫ LDPlayer
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    ldconsole = Path(ldplayer_path) / "ldconsole.exe"
    
    details = {
        'name': emulator_name,
        'exists': False,
        'is_running': False,
        'properties': {}
    }
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏
        result = subprocess.run(
            [str(ldconsole), "list"],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        if emulator_name in result.stdout:
            details['exists'] = True
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        result_status = subprocess.run(
            [str(ldconsole), "isrunning", "--name", emulator_name],
            capture_output=True,
            text=True,
            timeout=10
        )
        
        details['is_running'] = (result_status.returncode == 0)
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ getprop)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
        prop_commands = [
            ["globalsetting", "--name", emulator_name],
            ["getprop", "--name", emulator_name],
        ]
        
        for cmd in prop_commands:
            try:
                result_prop = subprocess.run(
                    [str(ldconsole)] + cmd,
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                if result_prop.returncode == 0 and result_prop.stdout.strip():
                    details['properties'][' '.join(cmd)] = result_prop.stdout.strip()
            except:
                pass
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {emulator_name}: {e}")
    
    return details


if __name__ == "__main__":
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ list2
        emulators = parse_ldconsole_list2()
        
        if emulators:
            print(f"\n{'=' * 70}")
            print("üìã –°–ü–ò–°–û–ö –í–°–ï–• –≠–ú–£–õ–Ø–¢–û–†–û–í")
            print(f"{'=' * 70}\n")
            
            for emu in emulators:
                print(f"{emu['index']}. {emu['name']}")
                print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {emu['resolution_width']}x{emu['resolution_height']}")
                print(f"   DPI: {emu['dpi']}")
                print(f"   –°—Ç–∞—Ç—É—Å: {'üü¢ –ó–∞–ø—É—â–µ–Ω' if emu['is_running'] else '‚ö™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print()
            
            # –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
            print(f"{'=' * 70}")
            print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
            print(f"{'=' * 70}\n")
            
            for emu in emulators:
                details = get_emulator_details(emu['name'])
                
                print(f"üì± {emu['name']}")
                print(f"   –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {'‚úÖ' if details['exists'] else '‚ùå'}")
                print(f"   –ó–∞–ø—É—â–µ–Ω: {'‚úÖ' if details['is_running'] else '‚ùå'}")
                
                if details['properties']:
                    print(f"   –°–≤–æ–π—Å—Ç–≤–∞:")
                    for key, value in details['properties'].items():
                        print(f"      {key}:")
                        for line in value.split('\n')[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                            print(f"         {line}")
                print()
        
        else:
            print("\n‚ö†Ô∏è –≠–º—É–ª—è—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
