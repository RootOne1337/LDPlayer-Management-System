"""
üöÄ –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –° –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import uvicorn

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
from system_diagnostics import SystemDiagnostics, Colors, print_header, print_section, print_success, print_error, print_info

# –ò–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
from src.core.server import app


async def pre_startup_diagnostics():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–µ—Ä–≤–µ—Ä–∞"""
    print_header("üöÄ –ó–ê–ü–£–°–ö LDPLAYER MANAGEMENT SYSTEM")
    
    print_info(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print_info(f"Python: {sys.version.split()[0]}")
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    print_section("–ü–†–ï–î–°–¢–ê–†–¢–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê")
    
    diagnostics = SystemDiagnostics()
    results = await diagnostics.run_full_diagnostics()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    critical_errors = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if results.get("database", {}).get("status") == "error":
        critical_errors.append("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if results.get("file_structure", {}).get("status") == "errors":
        critical_errors.append("–ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
    
    if critical_errors:
        print_error("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´:")
        for error in critical_errors:
            print_error(f"  ‚Ä¢ {error}")
        print_error("\n–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ!")
        
        response = input(f"\n{Colors.YELLOW}–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø—É—Å–∫ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏? (y/N): {Colors.ENDC}")
        if response.lower() != 'y':
            print_error("–ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
    
    return True


class ServerManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 8001):
        self.host = host
        self.port = port
        self.server_started = False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            # –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            if not await pre_startup_diagnostics():
                return
            
            print_section("–ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê")
            
            print_info(f"–•–æ—Å—Ç: {self.host}")
            print_info(f"–ü–æ—Ä—Ç: {self.port}")
            print_info(f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:{self.port}/docs")
            print_info(f"Web UI: http://localhost:{self.port}/static/index.html")
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è uvicorn
            config = uvicorn.Config(
                app=app,
                host=self.host,
                port=self.port,
                log_level="info",
                access_log=True,
                reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                loop="asyncio"
            )
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            server = uvicorn.Server(config)
            
            print_success("–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
            print()
            print(f"{Colors.GREEN}{Colors.BOLD}{'=' * 80}{Colors.ENDC}")
            print(f"{Colors.GREEN}{Colors.BOLD}{'–°–ï–†–í–ï–† –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù'.center(80)}{Colors.ENDC}")
            print(f"{Colors.GREEN}{Colors.BOLD}{'=' * 80}{Colors.ENDC}")
            print()
            print(f"{Colors.CYAN}üì° API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {Colors.BOLD}http://localhost:{self.port}/api{Colors.ENDC}")
            print(f"{Colors.CYAN}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {Colors.BOLD}http://localhost:{self.port}/docs{Colors.ENDC}")
            print(f"{Colors.CYAN}üé® Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {Colors.BOLD}http://localhost:{self.port}/static/index.html{Colors.ENDC}")
            print()
            print(f"{Colors.YELLOW}–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C{Colors.ENDC}")
            print()
            
            self.server_started = True
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
            await server.serve()
            
        except KeyboardInterrupt:
            print(f"\n\n{Colors.YELLOW}–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C){Colors.ENDC}")
            await self.shutdown()
        except Exception as e:
            print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            import traceback
            traceback.print_exc()
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server_started:
            print_section("–û–°–¢–ê–ù–û–í–ö–ê –°–ï–†–í–ï–†–ê")
            print_info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
            print_info("–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
            print_success("–°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print()
        print(f"{Colors.CYAN}–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LDPlayer Management System!{Colors.ENDC}")
        print()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI —Ü–≤–µ—Ç–æ–≤ –≤ Windows
    if sys.platform == "win32":
        os.system("")  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VT100 —Ä–µ–∂–∏–º
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    manager = ServerManager(host="0.0.0.0", port=8001)
    await manager.start()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–í—ã—Ö–æ–¥...{Colors.ENDC}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Colors.RED}–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.ENDC}")
        sys.exit(1)
