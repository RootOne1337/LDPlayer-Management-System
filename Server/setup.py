#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ LDPlayer Management System.

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —Å–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
–∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫ –∑–∞–ø—É—Å–∫—É.
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from typing import List, Tuple


class ServerSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞."""
        self.root_dir = Path(__file__).parent
        self.requirements_file = self.root_dir / "requirements.txt"
        self.config_file = self.root_dir / "config.json"

    def print_step(self, step: str, status: str = "üîÑ"):
        """–í—ã–≤–µ—Å—Ç–∏ —à–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        print(f"{status} {step}")

    def run_command(self, command: List[str], shell: bool = False) -> Tuple[int, str, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""
        try:
            result = subprocess.run(
                command,
                shell=shell,
                capture_output=True,
                text=True,
                cwd=self.root_dir
            )
            return result.returncode, result.stdout, result.stderr
        except Exception as e:
            return 1, "", str(e)

    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä—Å–∏—é Python."""
        self.print_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")

        version = sys.version_info
        if version.major == 3 and version.minor >= 8:
            self.print_step(f"–í–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}", "‚úÖ")
            return True
        else:
            self.print_step(f"–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}", "‚ùå")
            return False

    def install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
        self.print_step("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

        if not self.requirements_file.exists():
            self.print_step("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω", "‚ùå")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pip
        code, _, _ = self.run_command([sys.executable, "-m", "pip", "--version"])
        if code != 0:
            self.print_step("pip –Ω–µ –Ω–∞–π–¥–µ–Ω", "‚ùå")
            return False

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        code, stdout, stderr = self.run_command([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])

        if code == 0:
            self.print_step("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ", "‚úÖ")
            return True
        else:
            self.print_step(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {stderr}", "‚ùå")
            return False

    def create_directories(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞")

        directories = [
            "configs",
            "logs",
            "backups",
            "src/core",
            "src/remote",
            "src/api",
            "src/utils"
        ]

        try:
            for dir_name in directories:
                dir_path = self.root_dir / dir_name
                dir_path.mkdir(parents=True, exist_ok=True)

            self.print_step("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ", "‚úÖ")
            return True

        except Exception as e:
            self.print_step(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}", "‚ùå")
            return False

    def create_config_file(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

        if self.config_file.exists():
            self.print_step("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "‚úÖ")
            return True

        # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_data = {
            "server": {
                "host": "0.0.0.0",
                "port": 8000,
                "debug": True,
                "reload": True,
                "websocket_port": 8001,
                "log_level": "INFO",
                "log_file": "logs/server.log",
                "database_url": "sqlite:///./ldplayer_manager.db",
                "secret_key": "your-secret-key-change-in-production",
                "access_token_expire_minutes": 30
            },
            "workstations": [
                {
                    "id": f"ws_{i+1"03d"}",
                    "name": f"–†–∞–±–æ—á–∞—è —Å—Ç–∞–Ω—Ü–∏—è {i+1}",
                    "ip_address": f"192.168.1.{101+i}",
                    "username": "administrator",
                    "password": "your_password_here",
                    "domain": "",
                    "ldplayer_path": "C:\\LDPlayer\\LDPlayer9.0",
                    "ldconsole_path": "C:\\LDPlayer\\LDPlayer9.0\\ldconsole.exe",
                    "configs_path": "C:\\LDPlayer\\LDPlayer9.0\\customizeConfigs",
                    "smb_enabled": True,
                    "powershell_remoting_enabled": True,
                    "winrm_port": 5985,
                    "monitoring_enabled": True,
                    "monitoring_interval": 30,
                    "status": "unknown",
                    "last_seen": None
                }
                for i in range(8)
            ],
            "system": {
                "base_dir": str(self.root_dir),
                "configs_dir": str(self.root_dir / "configs"),
                "logs_dir": str(self.root_dir / "logs"),
                "backups_dir": str(self.root_dir / "backups"),
                "backup_enabled": True,
                "backup_interval": 3600,
                "max_backups": 10,
                "global_monitoring": True,
                "alert_thresholds": {
                    "cpu_usage": 80.0,
                    "memory_usage": 85.0,
                    "disk_usage": 90.0
                }
            }
        }

        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)

            self.print_step("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ", "‚úÖ")
            self.print_step("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ config.json!", "‚ö†Ô∏è")
            return True

        except Exception as e:
            self.print_step(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", "‚ùå")
            return False

    def create_init_files(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å __init__.py —Ñ–∞–π–ª—ã."""
        self.print_step("–°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤")

        init_files = [
            "src/__init__.py",
            "src/core/__init__.py",
            "src/remote/__init__.py",
            "src/api/__init__.py",
            "src/utils/__init__.py"
        ]

        try:
            for init_file in init_files:
                init_path = self.root_dir / init_file
                if not init_path.exists():
                    init_path.parent.mkdir(parents=True, exist_ok=True)
                    init_path.write_text('"""\nLDPlayer Management System - Server\n"""\n')

            self.print_step("__init__.py —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ", "‚úÖ")
            return True

        except Exception as e:
            self.print_step(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è __init__.py —Ñ–∞–π–ª–æ–≤: {e}", "‚ùå")
            return False

    def test_installation(self) -> bool:
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É."""
        self.print_step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")

        try:
            # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            from src.core.config import get_config
            from src.core.models import Emulator, Workstation

            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = get_config()

            self.print_step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ", "‚úÖ")
            self.print_step(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π: {len(config.workstations)}", "‚ÑπÔ∏è")
            return True

        except ImportError as e:
            self.print_step(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}", "‚ùå")
            return False
        except Exception as e:
            self.print_step(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", "‚ùå")
            return False

    def show_next_steps(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏."""
        print(f"\n{'='*60}")
        print("üéâ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print('='*60)

        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. üìù –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª–∏ –≤ —Ñ–∞–π–ª–µ config.json")
        print("2. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ IP –∞–¥—Ä–µ—Å–∞ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π")
        print("3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run.py")
        print("4. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000/docs")
        print("5. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É: python test_server.py")

        print("\nüîó –í–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config_file}")
        print(f"   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:{self.config.server.port}/docs")
        print("   –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞: logs/server.log"

        print("\nüí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print("   –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞: python run.py")
        print("   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python test_server.py")
        print("   –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: python run.py --create-config")
        print("   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω—Ü–∏–π: python run.py --list-workstations")

        print(f"\n{'='*60}")

    def run_setup(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É."""
        print("üöÄ –ù–ê–ß–ê–õ–û –£–°–¢–ê–ù–û–í–ö–ò LDPLAYER MANAGEMENT SYSTEM")
        print("=" * 60)

        steps = [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python", self.check_python_version),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π", self.create_directories),
            ("–°–æ–∑–¥–∞–Ω–∏–µ __init__.py —Ñ–∞–π–ª–æ–≤", self.create_init_files),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.create_config_file),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_dependencies),
            ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", self.test_installation),
        ]

        success_count = 0

        for step_name, step_func in steps:
            try:
                if step_func():
                    success_count += 1
                else:
                    self.print_step(f"{step_name} - –ù–ï–£–î–ê–ß–ê", "‚ùå")
            except Exception as e:
                self.print_step(f"{step_name} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}", "‚ùå")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        total_steps = len(steps)
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–°–¢–ê–ù–û–í–ö–ò:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤: {success_count}/{total_steps}")

        if success_count == total_steps:
            self.show_next_steps()
            return True
        else:
            print("
‚ùå –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò"            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É"            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    setup = ServerSetup()

    print("üîß LDPlayer Management System - –ú–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–µ—Ä–≤–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer")

    try:
        success = setup.run_setup()
        if success:
            print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return 0
        else:
            print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            return 1

    except KeyboardInterrupt:
        print("\n\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())