#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è LDPlayer —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import json
import sys
import time
from pathlib import Path
from typing import Dict, List, Any

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ PYTHONPATH
root_dir = Path(__file__).parent
sys.path.insert(0, str(root_dir))

try:
    from src.core.config import get_config, config_manager
    from src.core.models import WorkstationStatus
    from src.remote.workstation import WorkstationManager
    from src.remote.ldplayer_manager import LDPlayerManager
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)


class ServerTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞."""
        self.config = get_config()
        self.results: Dict[str, Any] = {}

    def print_header(self, title: str):
        """–í—ã–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏."""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print('='*60)

    def print_result(self, test_name: str, success: bool, message: str, details: str = ""):
        """–í—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞."""
        status = "‚úÖ –ü–ê–°" if success else "‚ùå –ù–ï–£–î–ê–ß–ê"
        print(f"{status} {test_name}: {message}")
        if details:
            print(f"   ‚îî‚îÄ {details}")

        self.results[test_name] = {
            'success': success,
            'message': message,
            'details': details
        }

    async def test_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")

        try:
            # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = get_config()
            self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", True, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π
            ws_count = len(config.workstations)
            self.print_result(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π",
                True,
                f"–ù–∞–π–¥–µ–Ω–æ {ws_count} —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π",
                f"–û–∂–∏–¥–∞–ª–æ—Å—å: 8, –ù–∞–π–¥–µ–Ω–æ: {ws_count}"
            )

            # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞
            server_config = config.server
            self.print_result(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                True,
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
                f"–•–æ—Å—Ç: {server_config.host}, –ü–æ—Ä—Ç: {server_config.port}"
            )

        except Exception as e:
            self.print_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, f"–û—à–∏–±–∫–∞: {e}")

    async def test_workstation_connections(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ —Ä–∞–±–æ—á–∏–º —Å—Ç–∞–Ω—Ü–∏—è–º."""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô –ö –†–ê–ë–û–ß–ò–ú –°–¢–ê–ù–¶–ò–Ø–ú")

        config = get_config()
        total_tests = len(config.workstations)
        successful_connections = 0

        for ws_config in config.workstations:
            print(f"\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {ws_config.name} ({ws_config.ip_address})...")

            try:
                manager = WorkstationManager(ws_config)
                success, message = manager.test_connection()

                if success:
                    successful_connections += 1
                    self.print_result(
                        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ws_config.name}",
                        True,
                        message
                    )
                else:
                    self.print_result(
                        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ws_config.name}",
                        False,
                        message
                    )

            except Exception as e:
                self.print_result(
                    f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ws_config.name}",
                    False,
                    f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                )

        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_rate = successful_connections / total_tests * 100 if total_tests > 0 else 0
        self.print_result(
            "–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
            successful_connections > 0,
            f"–£—Å–ø–µ—à–Ω—ã—Ö: {successful_connections}/{total_tests} ({success_rate".1f"}%)"
        )

    async def test_ldplayer_commands(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ LDPlayer."""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ê–ù–î LDPLAYER")

        config = get_config()
        tested_stations = 0
        successful_commands = 0

        for ws_config in config.workstations:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä—ã–º –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            manager = WorkstationManager(ws_config)
            if not manager.test_connection()[0]:
                continue

            tested_stations += 1
            print(f"\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ {ws_config.name}...")

            try:
                # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã list
                status_code, stdout, stderr = manager.run_ldconsole_command('list')

                if status_code == 0:
                    self.print_result(
                        f"–ö–æ–º–∞–Ω–¥–∞ list –Ω–∞ {ws_config.name}",
                        True,
                        "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                        f"–í—ã–≤–æ–¥: {stdout[:100]}..."
                    )
                    successful_commands += 1
                else:
                    self.print_result(
                        f"–ö–æ–º–∞–Ω–¥–∞ list –Ω–∞ {ws_config.name}",
                        False,
                        f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stderr}"
                    )

            except Exception as e:
                self.print_result(
                    f"–ö–æ–º–∞–Ω–¥–∞ list –Ω–∞ {ws_config.name}",
                    False,
                    f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                )

        if tested_stations > 0:
            command_success_rate = successful_commands / tested_stations * 100
            self.print_result(
                "–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥",
                successful_commands > 0,
                f"–£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {successful_commands}/{tested_stations} ({command_success_rate".1f"}%)"
            )
        else:
            self.print_result(
                "–ö–æ–º–∞–Ω–¥—ã LDPlayer",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )

    async def test_emulator_operations(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏."""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ô –° –≠–ú–£–õ–Ø–¢–û–†–ê–ú–ò")

        config = get_config()
        operations_tested = 0
        operations_successful = 0

        for ws_config in config.workstations:
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            manager = WorkstationManager(ws_config)
            if not manager.test_connection()[0]:
                continue

            print(f"\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ {ws_config.name}...")

            try:
                # –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä LDPlayer
                ldplayer_manager = LDPlayerManager(manager)

                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                emulators = ldplayer_manager.get_emulators()

                self.print_result(
                    f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ {ws_config.name}",
                    True,
                    f"–ù–∞–π–¥–µ–Ω–æ {len(emulators)} —ç–º—É–ª—è—Ç–æ—Ä–æ–≤"
                )

                operations_tested += 1
                if len(emulators) >= 0:  # –î–∞–∂–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —É—Å–ø–µ—Ö
                    operations_successful += 1

                # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞ (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π)
                if len(emulators) == 0:
                    test_name = f"test_emulator_{ws_config.id}"
                    operation = ldplayer_manager.create_emulator(test_name)

                    self.print_result(
                        f"–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –Ω–∞ {ws_config.name}",
                        True,
                        f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {operation.id}"
                    )

                    operations_tested += 1
                    operations_successful += 1

            except Exception as e:
                self.print_result(
                    f"–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ –Ω–∞ {ws_config.name}",
                    False,
                    f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}"
                )

        if operations_tested > 0:
            op_success_rate = operations_successful / operations_tested * 100
            self.print_result(
                "–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–π",
                operations_successful > 0,
                f"–£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {operations_successful}/{operations_tested} ({op_success_rate".1f"}%)"
            )
        else:
            self.print_result(
                "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏",
                False,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
            )

    async def test_api_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints."""
        self.print_header("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")

        try:
            import httpx

            base_url = f"http://{self.config.server.host}:{self.config.server.port}"

            async with httpx.AsyncClient() as client:
                # –¢–µ—Å—Ç health endpoint
                response = await client.get(f"{base_url}/api/health")

                if response.status_code == 200:
                    data = response.json()
                    self.print_result(
                        "Health Check (/api/health)",
                        True,
                        "API —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç",
                        f"–°—Ç–∞—Ç—É—Å: {data.get('data', {}).get('status')}"
                    )
                else:
                    self.print_result(
                        "Health Check (/api/health)",
                        False,
                        f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}"
                    )

                # –¢–µ—Å—Ç status endpoint
                response = await client.get(f"{base_url}/api/status")

                if response.status_code == 200:
                    data = response.json()
                    self.print_result(
                        "Server Status (/api/status)",
                        True,
                        "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω",
                        f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π: {data.get('connected_workstations', 0)}"
                    )
                else:
                    self.print_result(
                        "Server Status (/api/status)",
                        False,
                        f"–û—à–∏–±–∫–∞ HTTP: {response.status_code}"
                    )

        except ImportError:
            self.print_result(
                "API Endpoints",
                False,
                "httpx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install httpx"
            )
        except Exception as e:
            self.print_result(
                "API Endpoints",
                False,
                f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}"
            )

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.print_header("–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")

        total_tests = len(self.results)
        successful_tests = sum(1 for result in self.results.values() if result['success'])

        print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {total_tests - successful_tests}")

        if total_tests > 0:
            success_rate = successful_tests / total_tests * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate".1f"}%")

            if success_rate >= 80:
                print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
            elif success_rate >= 60:
                print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è.")
            else:
                print("‚ö†Ô∏è –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã.")
        else:
            print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å.")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if successful_tests < total_tests:
            print("
üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –≤ config.json"            print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ LDPlayer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≤—Å–µ—Ö —Å—Ç–∞–Ω—Ü–∏—è—Ö"            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç–∞–Ω—Ü–∏–π"            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt"
    def save_results(self, filename: str = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        if filename is None:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"test_results_{timestamp}.json"

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': datetime.now().isoformat(),
                    'results': self.results,
                    'summary': {
                        'total_tests': len(self.results),
                        'successful_tests': sum(1 for r in self.results.values() if r['success']),
                        'success_rate': sum(1 for r in self.results.values() if r['success']) / len(self.results) * 100 if self.results else 0
                    }
                }, f, indent=2, ensure_ascii=False, default=str)

            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

    async def run_all_tests(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø LDPLAYER MANAGEMENT SYSTEM")
        print("=" * 80)

        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
        await self.test_configuration()
        await self.test_workstation_connections()
        await self.test_ldplayer_commands()
        await self.test_emulator_operations()
        await self.test_api_endpoints()

        # –í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏
        self.print_summary()

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results()

        print("\n" + "=" * 80)
        print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = ServerTester()
    await tester.run_all_tests()


if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ LDPlayer Management System")
    print("–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python run.py")
    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python test_server.py")

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)