#!/usr/bin/env python3
"""Live demo of LDPlayer Management System API with error handling"""

import requests
import json
import sys
import time

BASE = 'http://127.0.0.1:8000/api'

print('\n' + '='*70)
print('üöÄ  LDPlayer Management System - LIVE API Demo')
print('='*70)

# Step 1: Health Check
print('\nüè• 0. –ü–†–û–í–ï–†–Ø–ï–ú –ó–î–û–†–û–í–¨–ï –°–ï–†–í–ï–†–ê')
print('-'*70)

try:
    health = requests.get('http://127.0.0.1:8000/api/health', timeout=5)
    print(f'‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω! Status: {health.status_code}')
    print(f'   Response: {health.json()}')
except Exception as e:
    print(f'‚ùå –û–®–ò–ë–ö–ê: {e}')
    sys.exit(1)

# Step 2: Login
print('\nüîê 1. –ü–û–õ–£–ß–ê–ï–ú JWT –¢–û–ö–ï–ù')
print('-'*70)

try:
    login_response = requests.post(
        f'{BASE}/auth/login',
        json={'username': 'admin', 'password': 'admin'},
        timeout=5
    )
    
    print(f'üì§ POST /api/auth/login')
    print(f'   Status: {login_response.status_code}')
    
    if login_response.status_code == 200:
        token_data = login_response.json()
        token = token_data['access_token']
        print('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω!')
        print(f'   –¢–æ–∫–µ–Ω: {token[:40]}...')
        print(f'   –¢–∏–ø: {token_data.get("token_type", "unknown")}')
        if 'user' in token_data:
            print(f'   –†–æ–ª—å: {token_data["user"]["role"]}')
        
        headers = {'Authorization': f'Bearer {token}'}
        
        # Step 3: Get Emulators
        print('\nüì± 2. –ü–û–õ–£–ß–ê–ï–ú –°–ü–ò–°–û–ö –≠–ú–£–õ–Ø–¢–û–†–û–í')
        print('-'*70)
        
        try:
            emul_response = requests.get(
                f'{BASE}/emulators?skip=0&limit=10',
                headers=headers,
                timeout=5
            )
            
            print(f'üì• GET /api/emulators')
            print(f'   Status: {emul_response.status_code}')
            
            if emul_response.status_code == 200:
                data = emul_response.json()
                print(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
                print(f'   Success: {data.get("success")}')
                print(f'   Message: {data.get("message")}')
                if 'pagination' in data:
                    print(f'   –í—Å–µ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {data["pagination"].get("total", "?")}')
                    print(f'   –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get("data", []))}')
                
                if data.get('data'):
                    print(f'\n   üìã –ü–µ—Ä–≤—ã–µ —ç–º—É–ª—è—Ç–æ—Ä—ã:\n')
                    for i, emul in enumerate(data['data'][:5], 1):
                        status_icon = '‚ñ∂Ô∏è ' if emul.get('status') == 'running' else '‚èπÔ∏è '
                        print(f'      {i}. {status_icon}{emul.get("name", "N/A")} (ID: {emul.get("id", "N/A")})')
                        print(f'         –°—Ç–∞–Ω—Ü–∏—è: {emul.get("workstation_id", "N/A")}')
                        print(f'         –°—Ç–∞—Ç—É—Å: {emul.get("status", "unknown")}')
                else:
                    print('   üì≠ –≠–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            else:
                print(f'‚ùå –û–®–ò–ë–ö–ê: Status {emul_response.status_code}')
                print(f'   Response: {emul_response.text[:200]}')
                
        except Exception as e:
            print(f'‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤: {e}')
        
        # Step 4: Get Workstations
        print('\nüñ•Ô∏è  3. –ü–û–õ–£–ß–ê–ï–ú –†–ê–ë–û–ß–ò–ï –°–¢–ê–ù–¶–ò–ò')
        print('-'*70)
        
        try:
            ws_response = requests.get(
                f'{BASE}/workstations',
                headers=headers,
                timeout=5
            )
            
            print(f'üì• GET /api/workstations')
            print(f'   Status: {ws_response.status_code}')
            
            if ws_response.status_code == 200:
                ws_data = ws_response.json()
                print(f'‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
                if ws_data.get('data'):
                    print(f'   –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω—Ü–∏–π: {len(ws_data["data"])}')
                    for i, ws in enumerate(ws_data['data'][:3], 1):
                        print(f'      {i}. {ws.get("name", "N/A")} (ID: {ws.get("id", "N/A")})')
                else:
                    print('   üì≠ –°—Ç–∞–Ω—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            else:
                print(f'‚ùå –û–®–ò–ë–ö–ê: Status {ws_response.status_code}')
                
        except Exception as e:
            print(f'‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞–Ω—Ü–∏–π: {e}')
            
    else:
        print(f'‚ùå –û–®–ò–ë–ö–ê –õ–û–ì–ò–ù–ê: Status {login_response.status_code}')
        print(f'   Response: {login_response.text[:300]}')
        
except Exception as e:
    print(f'‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}')
    import traceback
    traceback.print_exc()

print('\n' + '='*70)
print('‚ú® Demo –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
print('='*70 + '\n')
