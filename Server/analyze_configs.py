#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤.
"""

from pathlib import Path
import json

def analyze_config_file(config_path: Path):
    """–î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω .config —Ñ–∞–π–ª."""
    print(f"\n{'='*70}")
    print(f"üìÑ {config_path.name}")
    print(f"üìç {config_path}")
    print(f"{'='*70}")
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print(f"üìè –†–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å–≤–æ–π—Å—Ç–≤
        properties = {}
        lines = content.split('\n')
        
        for line in lines:
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key, value = line.split('=', 1)
                properties[key.strip()] = value.strip().strip('"')
        
        print(f"üìã –°–≤–æ–π—Å—Ç–≤: {len(properties)}")
        
        # –í–∞–∂–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        important_keys = [
            'statusSettings.playerName',
            'statusSettings.playerIndex',
            'resolution.width',
            'resolution.height',
            'propertySettings.phoneMemory',
            'propertySettings.phoneCPUCores',
            'advancedSettings.cpuModel',
            'advancedSettings.manufacturer'
        ]
        
        print(f"\nüîë –ö–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
        for key in important_keys:
            if key in properties:
                print(f"   {key}: {properties[key]}")
        
        # –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if len(properties) < 30:  # –ï—Å–ª–∏ –º–∞–ª–æ —Å–≤–æ–π—Å—Ç–≤, –ø–æ–∫–∞–∂–µ–º –≤—Å–µ
            print(f"\nüìù –í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞:")
            for key, value in sorted(properties.items()):
                print(f"   {key} = {value}")
        
        return properties
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("="*70)
    
    ldplayer_path = Path(r"C:\LDPlayer\LDPlayer9")
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ .config —Ñ–∞–π–ª—ã
    config_paths = []
    
    # –í vms/config
    vms_config = ldplayer_path / "vms" / "config"
    if vms_config.exists():
        for f in vms_config.glob("*.config"):
            config_paths.append(f)
    
    # –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ vms
    vms_path = ldplayer_path / "vms"
    if vms_path.exists():
        for f in vms_path.glob("*.config"):
            if f not in config_paths:  # –ò–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                config_paths.append(f)
    
    print(f"\nüìÇ –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(config_paths)}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    all_configs = {}
    for config_path in sorted(config_paths):
        props = analyze_config_file(config_path)
        all_configs[str(config_path)] = props
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å ldconsole
    print(f"\n{'='*70}")
    print("üîß –°–†–ê–í–ù–ï–ù–ò–ï –° LDCONSOLE")
    print(f"{'='*70}")
    
    ldconsole = ldplayer_path / "ldconsole.exe"
    
    try:
        import subprocess
        result = subprocess.run(
            [str(ldconsole), "list"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            ldconsole_emulators = [
                line.strip() 
                for line in result.stdout.strip().split('\n')[1:] 
                if line.strip()
            ]
            
            print(f"\n‚úÖ ldconsole list –≤–µ—Ä–Ω—É–ª:")
            for emu in ldconsole_emulators:
                print(f"   - {emu}")
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            print(f"\nüîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ldconsole:")
            
            # list2 - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            result2 = subprocess.run(
                [str(ldconsole), "list2"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result2.returncode == 0 and result2.stdout.strip():
                print(f"\n   ldconsole list2:")
                print(f"   {result2.stdout}")
            
            # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å runninglist
            result3 = subprocess.run(
                [str(ldconsole), "runninglist"],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result3.returncode == 0:
                print(f"\n   ldconsole runninglist:")
                print(f"   {result3.stdout if result3.stdout.strip() else '(–ø—É—Å—Ç–æ - –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö)'}")
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–º—É–ª—è—Ç–æ—Ä–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø–æ–ø—Ä–æ–±—É–µ–º isrunning
            print(f"\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤:")
            
            checked_names = set()
            for config_path, props in all_configs.items():
                name = props.get('statusSettings.playerName')
                if not name:
                    name = Path(config_path).stem
                
                if name in checked_names:
                    continue
                checked_names.add(name)
                
                result_status = subprocess.run(
                    [str(ldconsole), "isrunning", "--name", name],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                status = "running" if result_status.returncode == 0 else "stopped"
                print(f"   {name}: {status}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = Path(__file__).parent / "config_analysis.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(all_configs, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
