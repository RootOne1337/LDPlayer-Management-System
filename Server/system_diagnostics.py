"""
üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–©–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
–ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
import socket
import platform
import subprocess
import json
from typing import Dict, List, Tuple, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (Windows PowerShell –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ANSI)
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(text: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    width = 80
    print(f"\n{Colors.CYAN}{'=' * width}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.HEADER}{text.center(width)}{Colors.ENDC}")
    print(f"{Colors.CYAN}{'=' * width}{Colors.ENDC}\n")

def print_section(text: str):
    """–°–µ–∫—Ü–∏—è"""
    print(f"\n{Colors.BLUE}{'‚îÄ' * 80}{Colors.ENDC}")
    print(f"{Colors.BOLD}{Colors.CYAN}üìã {text}{Colors.ENDC}")
    print(f"{Colors.BLUE}{'‚îÄ' * 80}{Colors.ENDC}")

def print_success(text: str):
    """–£—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.ENDC}")

def print_error(text: str):
    """–û—à–∏–±–∫–∞"""
    print(f"{Colors.RED}‚ùå {text}{Colors.ENDC}")

def print_warning(text: str):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.ENDC}")

def print_info(text: str):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    print(f"{Colors.CYAN}‚ÑπÔ∏è  {text}{Colors.ENDC}")

def print_stat(label: str, value: str, status: str = "info"):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    color = Colors.GREEN if status == "success" else Colors.YELLOW if status == "warning" else Colors.CYAN
    print(f"  {color}‚ñ™{Colors.ENDC} {label}: {Colors.BOLD}{value}{Colors.ENDC}")


class SystemDiagnostics:
    """–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    def __init__(self):
        self.results: Dict[str, Any] = {
            "timestamp": datetime.now().isoformat(),
            "system": {},
            "protocols": {},
            "database": {},
            "network": {},
            "services": {}
        }
    
    async def run_full_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print_header("üöÄ –°–ò–°–¢–ï–ú–ê –ú–û–©–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò LDPlayer Management")
        
        print_info(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print_info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version.split()[0]}")
        print_info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.platform()}")
        
        # 1. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await self.check_system_info()
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        await self.check_file_structure()
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.check_database()
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        await self.check_network_protocols()
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await self.check_remote_tools()
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ ADB –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        await self.check_adb_protocol()
        
        # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ LDPlayer
        await self.check_ldplayer()
        
        # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        self.print_final_summary()
        
        return self.results
    
    async def check_system_info(self):
        """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        print_section("–°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        
        try:
            # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            os_info = {
                "platform": platform.system(),
                "release": platform.release(),
                "version": platform.version(),
                "architecture": platform.machine(),
                "processor": platform.processor(),
                "hostname": socket.gethostname()
            }
            
            self.results["system"] = os_info
            
            print_stat("–û–°", f"{os_info['platform']} {os_info['release']}", "success")
            print_stat("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", os_info['architecture'], "success")
            print_stat("–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", os_info['processor'][:50], "info")
            print_stat("–ò–º—è —Ö–æ—Å—Ç–∞", os_info['hostname'], "success")
            
            # IP –∞–¥—Ä–µ—Å–∞
            hostname = socket.gethostname()
            try:
                ip_address = socket.gethostbyname(hostname)
                print_stat("IP –∞–¥—Ä–µ—Å", ip_address, "success")
                self.results["system"]["ip_address"] = ip_address
            except:
                print_warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP –∞–¥—Ä–µ—Å")
            
            print_success("–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            self.results["system"]["error"] = str(e)
    
    async def check_file_structure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        print_section("–§–ê–ô–õ–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê")
        
        base_path = Path(__file__).parent
        required_paths = {
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": base_path / "config.json",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": base_path / "configs" / "workstations.db",
            "–õ–æ–≥–∏": base_path / "logs",
            "–°—Ç–∞—Ç–∏–∫–∞": base_path / "static",
            "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏": base_path / "src",
            "–Ø–¥—Ä–æ": base_path / "src" / "core",
            "API": base_path / "src" / "api",
            "–£—Ç–∏–ª–∏—Ç—ã": base_path / "src" / "utils",
            "–£–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": base_path / "src" / "remote"
        }
        
        structure_ok = True
        for name, path in required_paths.items():
            if path.exists():
                print_success(f"{name}: {path.name}")
            else:
                print_error(f"{name}: –ù–ï –ù–ê–ô–î–ï–ù–û - {path}")
                structure_ok = False
        
        self.results["file_structure"] = {
            "status": "ok" if structure_ok else "errors",
            "paths_checked": len(required_paths),
            "base_path": str(base_path)
        }
        
        if structure_ok:
            print_success("–§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
        else:
            print_warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
    
    async def check_database(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print_section("–ë–ê–ó–ê –î–ê–ù–ù–´–•")
        
        try:
            from src.utils.config_manager import ConfigManager
            
            config_manager = ConfigManager()
            db_path = config_manager.db_path
            
            print_info(f"–ü—É—Ç—å –∫ –ë–î: {db_path}")
            
            if not db_path.exists():
                print_error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                self.results["database"]["status"] = "missing"
                return
            
            # –†–∞–∑–º–µ—Ä –ë–î
            db_size = db_path.stat().st_size
            print_stat("–†–∞–∑–º–µ—Ä –ë–î", f"{db_size:,} –±–∞–π—Ç ({db_size / 1024:.2f} KB)", "success")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            import sqlite3
            conn = sqlite3.connect(str(db_path))
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            print_stat("–¢–∞–±–ª–∏—Ü –≤ –ë–î", str(len(tables)), "success")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            stats = {}
            for table in tables:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    count = cursor.fetchone()[0]
                    stats[table] = count
                    print_stat(f"  ‚îî‚îÄ {table}", f"{count} –∑–∞–ø–∏—Å–µ–π", "info")
                except Exception as e:
                    print_warning(f"  ‚îî‚îÄ {table}: –æ—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ - {e}")
            
            conn.close()
            
            self.results["database"] = {
                "status": "ok",
                "path": str(db_path),
                "size_bytes": db_size,
                "tables": tables,
                "statistics": stats
            }
            
            print_success(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {sum(stats.values())} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            self.results["database"] = {"status": "error", "error": str(e)}
    
    async def check_network_protocols(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
        print_section("–°–ï–¢–ï–í–´–ï –ü–†–û–¢–û–ö–û–õ–´ –ò –ü–û–†–¢–´")
        
        protocols = {
            "HTTP API": 8001,
            "ADB Start": 5555,
            "ADB End": 5585,
            "WinRM HTTP": 5985,
            "WinRM HTTPS": 5986,
            "SSH": 22,
            "SMB": 445
        }
        
        for name, port in protocols.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.settimeout(1)
                    result = s.connect_ex(('127.0.0.1', port))
                    
                    if result == 0:
                        print_success(f"{name} (–ø–æ—Ä—Ç {port}): –î–û–°–¢–£–ü–ï–ù")
                        self.results["network"][name] = {"port": port, "status": "available"}
                    else:
                        print_info(f"{name} (–ø–æ—Ä—Ç {port}): –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                        self.results["network"][name] = {"port": port, "status": "unused"}
            except Exception as e:
                print_warning(f"{name} (–ø–æ—Ä—Ç {port}): –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - {e}")
                self.results["network"][name] = {"port": port, "status": "error", "error": str(e)}
    
    async def check_remote_tools(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print_section("–ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –£–î–ê–õ–ï–ù–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        
        tools = {
            "paramiko": "SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "pywinrm": "Windows Remote Management",
            "smbprotocol": "SMB —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        }
        
        for module, description in tools.items():
            try:
                __import__(module)
                print_success(f"{module}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ({description})")
                self.results["protocols"][module] = {"status": "installed", "description": description}
            except ImportError:
                print_warning(f"{module}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù ({description})")
                self.results["protocols"][module] = {"status": "missing", "description": description}
    
    async def check_adb_protocol(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ADB –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        print_section("ADB (ANDROID DEBUG BRIDGE)")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è adb.exe
            adb_paths = [
                Path(os.environ.get("LOCALAPPDATA", "")) / "Android" / "Sdk" / "platform-tools" / "adb.exe",
                Path("C:/") / "Program Files (x86)" / "Android" / "android-sdk" / "platform-tools" / "adb.exe",
                Path("adb.exe")  # –í PATH
            ]
            
            adb_found = False
            adb_path = None
            
            for path in adb_paths:
                if path.exists():
                    adb_found = True
                    adb_path = path
                    break
            
            if adb_found:
                print_success(f"ADB –Ω–∞–π–¥–µ–Ω: {adb_path}")
                
                # –í–µ—Ä—Å–∏—è ADB
                try:
                    result = subprocess.run([str(adb_path), "version"], 
                                          capture_output=True, text=True, timeout=5)
                    version = result.stdout.split('\n')[0] if result.stdout else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    print_stat("–í–µ—Ä—Å–∏—è ADB", version, "success")
                    
                    # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                    result = subprocess.run([str(adb_path), "devices"], 
                                          capture_output=True, text=True, timeout=5)
                    devices = [line for line in result.stdout.split('\n') if '\t' in line]
                    print_stat("–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤", str(len(devices)), "info")
                    
                    self.results["protocols"]["adb"] = {
                        "status": "available",
                        "path": str(adb_path),
                        "version": version,
                        "devices": len(devices)
                    }
                    
                except Exception as e:
                    print_warning(f"ADB –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                    self.results["protocols"]["adb"] = {
                        "status": "found_but_error",
                        "path": str(adb_path),
                        "error": str(e)
                    }
            else:
                print_warning("ADB –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                print_info("ADB –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ Android SDK Platform Tools")
                self.results["protocols"]["adb"] = {"status": "not_found"}
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ADB: {e}")
            self.results["protocols"]["adb"] = {"status": "error", "error": str(e)}
    
    async def check_ldplayer(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ LDPlayer"""
        print_section("LDPLAYER –≠–ú–£–õ–Ø–¢–û–†")
        
        try:
            # –¢–∏–ø–∏—á–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ LDPlayer
            ldplayer_paths = [
                Path("C:/") / "LDPlayer" / "LDPlayer4.0",
                Path("C:/") / "LDPlayer" / "LDPlayer9",
                Path("D:/") / "LDPlayer" / "LDPlayer4.0",
                Path("D:/") / "LDPlayer" / "LDPlayer9",
            ]
            
            ldconsole_found = False
            ldconsole_path = None
            
            for base_path in ldplayer_paths:
                ldconsole = base_path / "ldconsole.exe"
                if ldconsole.exists():
                    ldconsole_found = True
                    ldconsole_path = ldconsole
                    break
            
            if ldconsole_found:
                print_success(f"LDConsole –Ω–∞–π–¥–µ–Ω: {ldconsole_path}")
                
                try:
                    # –°–ø–∏—Å–æ–∫ —ç–º—É–ª—è—Ç–æ—Ä–æ–≤
                    result = subprocess.run([str(ldconsole_path), "list2"], 
                                          capture_output=True, text=True, timeout=10, 
                                          encoding='utf-8', errors='ignore')
                    
                    emulators = []
                    for line in result.stdout.split('\n'):
                        if ',' in line:
                            parts = line.split(',')
                            if len(parts) >= 2:
                                emulators.append({
                                    "index": parts[0],
                                    "name": parts[1]
                                })
                    
                    print_stat("–õ–æ–∫–∞–ª—å–Ω—ã—Ö —ç–º—É–ª—è—Ç–æ—Ä–æ–≤", str(len(emulators)), "success")
                    
                    for emu in emulators[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        print_info(f"  ‚îî‚îÄ {emu['name']} (index: {emu['index']})")
                    
                    if len(emulators) > 5:
                        print_info(f"  ‚îî‚îÄ ... –∏ –µ—â–µ {len(emulators) - 5}")
                    
                    self.results["services"]["ldplayer"] = {
                        "status": "available",
                        "path": str(ldconsole_path),
                        "emulators_count": len(emulators),
                        "emulators": emulators[:10]  # –ü–µ—Ä–≤—ã–µ 10 –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    }
                    
                except Exception as e:
                    print_warning(f"LDConsole –Ω–∞–π–¥–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
                    self.results["services"]["ldplayer"] = {
                        "status": "found_but_error",
                        "path": str(ldconsole_path),
                        "error": str(e)
                    }
            else:
                print_warning("LDPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ")
                print_info("–ú–æ–∂–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —ç–º—É–ª—è—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ —Ä–∞–±–æ—á–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏")
                self.results["services"]["ldplayer"] = {"status": "not_found_locally"}
                
        except Exception as e:
            print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ LDPlayer: {e}")
            self.results["services"]["ldplayer"] = {"status": "error", "error": str(e)}
    
    def print_final_summary(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞"""
        print_section("–§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê")
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
        total_checks = 0
        passed_checks = 0
        warnings = 0
        errors = 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for category, data in self.results.items():
            if category == "timestamp":
                continue
            
            if isinstance(data, dict):
                for key, value in data.items():
                    total_checks += 1
                    if isinstance(value, dict):
                        status = value.get("status", "unknown")
                        if status in ["ok", "available", "installed", "success"]:
                            passed_checks += 1
                        elif status in ["warning", "unused", "not_found", "missing"]:
                            warnings += 1
                        elif status in ["error", "errors"]:
                            errors += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n{Colors.BOLD}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫:{Colors.ENDC}")
        print_stat("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫", str(total_checks), "info")
        print_stat("–£—Å–ø–µ—à–Ω–æ", str(passed_checks), "success")
        print_stat("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", str(warnings), "warning")
        print_stat("–û—à–∏–±–æ–∫", str(errors), "warning" if errors == 0 else "error")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if errors == 0 and warnings < 3:
            print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï{Colors.ENDC}")
        elif errors == 0:
            print(f"\n{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò{Colors.ENDC}")
        else:
            print(f"\n{Colors.RED}{Colors.BOLD}‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´{Colors.ENDC}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{Colors.CYAN}{Colors.BOLD}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Colors.ENDC}")
        
        if self.results.get("protocols", {}).get("adb", {}).get("status") == "not_found":
            print_info("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Android SDK Platform Tools –¥–ª—è ADB –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
        
        if self.results.get("services", {}).get("ldplayer", {}).get("status") == "not_found_locally":
            print_info("‚Ä¢ LDPlayer –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        if self.results.get("protocols", {}).get("paramiko", {}).get("status") == "missing":
            print_info("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ paramiko: pip install paramiko")
        
        if self.results.get("protocols", {}).get("pywinrm", {}).get("status") == "missing":
            print_info("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pywinrm: pip install pywinrm")
        
        print()
        print_header("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI —Ü–≤–µ—Ç–æ–≤ –≤ Windows
        if platform.system() == "Windows":
            os.system("")  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç VT100 —Ä–µ–∂–∏–º –≤ Windows 10+
        
        diagnostics = SystemDiagnostics()
        results = await diagnostics.run_full_diagnostics()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        report_path = Path(__file__).parent / "logs" / f"diagnostics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        report_path.parent.mkdir(exist_ok=True)
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print_info(f"\n–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        return 0
        
    except KeyboardInterrupt:
        print(f"\n\n{Colors.YELLOW}–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.ENDC}")
        return 1
    except Exception as e:
        print_error(f"\n–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))
