"""
üöÄ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- Cache endpoints (stats, clear, invalidate)
- Performance metrics
- Cache hit rates
"""

import pytest
from fastapi.testclient import TestClient
import time

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ src
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.core.server import app
from src.utils.cache import get_cache, _cache


client = TestClient(app)


@pytest.fixture
def admin_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        response = client.post(
            "/api/auth/login",
            data={"username": "admin", "password": "admin123"}
        )
        if response.status_code == 200:
            data = response.json()
            if "access_token" in data:
                return data["access_token"]
            # –ï—Å–ª–∏ —ç—Ç–æ APIResponse, –±–µ—Ä–µ–º –∏–∑ data
            if "data" in data and isinstance(data["data"], dict):
                return data["data"].get("access_token")
    except Exception:
        pass
    
    # Fallback - —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        client.post(
            "/api/auth/register",
            json={"username": "admin", "password": "admin123", "role": "admin"}
        )
        response = client.post(
            "/api/auth/login",
            data={"username": "admin", "password": "admin123"}
        )
        if response.status_code == 200:
            return response.json().get("access_token")
    except Exception:
        pass
    
    return None


class TestCachePerformance:
    """üöÄ –¢–µ—Å—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_cache_stats_endpoint(self, admin_token):
        """‚úÖ GET /api/performance/cache-stats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        response = client.get(
            "/api/performance/cache-stats",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        assert response.status_code == 200
        data = response.json()
        assert "cache_stats" in data
        assert "hits" in data["cache_stats"]
        assert "misses" in data["cache_stats"]
        assert "size" in data["cache_stats"]
    
    def test_cache_clear_endpoint(self, admin_token):
        """‚úÖ POST /api/performance/cache-clear –æ—á–∏—â–∞–µ—Ç –∫—ç—à"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫—ç—à –∫–∞–∫–∏–º-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        _cache.set("test_key", "test_value", 300)
        initial_size = _cache.get("test_key") is not None
        
        # –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
        response = client.post(
            "/api/performance/cache-clear",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        assert response.status_code == 200
        data = response.json()
        assert data["success"] is True
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫—ç—à –ø—É—Å—Ç
        assert _cache.get("test_key") is None
    
    def test_cache_invalidate_endpoint(self, admin_token):
        """‚úÖ POST /api/performance/cache-invalidate –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫—ç—à
        _cache.set("workstations:list", "data1", 300)
        _cache.set("workstations:detail", "data2", 300)
        _cache.set("users:list", "data3", 300)
        
        # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ workstations
        response = client.post(
            "/api/performance/cache-invalidate",
            headers={"Authorization": f"Bearer {admin_token}"},
            params={"pattern": "workstations"}
        )
        assert response.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert _cache.get("workstations:list") is None
        assert _cache.get("workstations:detail") is None
        assert _cache.get("users:list") == "data3"  # –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω
    
    def test_performance_metrics_endpoint(self, admin_token):
        """‚úÖ GET /api/performance/metrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        response = client.get(
            "/api/performance/metrics",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        assert response.status_code == 200
        data = response.json()
        assert "metrics" in data
        metrics = data["metrics"]
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ—Ç—Ä–∏–∫
        assert "cache" in metrics
        assert "managers" in metrics
        assert "websockets" in metrics
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cache –º–µ—Ç—Ä–∏–∫–∏
        cache_metrics = metrics["cache"]
        assert "hit_rate_percent" in cache_metrics
        assert "total_hits" in cache_metrics
        assert "total_misses" in cache_metrics
        assert "cached_items" in cache_metrics
    
    def test_cache_invalidate_requires_admin(self):
        """‚úÖ –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª–∏ ADMIN"""
        response = client.post(
            "/api/performance/cache-invalidate",
            params={"pattern": "test"}
        )
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å 401 –∏–ª–∏ 403 (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
        assert response.status_code in [401, 403]
    
    def test_cache_stats_requires_admin(self):
        """‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª–∏ ADMIN"""
        response = client.get("/api/performance/cache-stats")
        assert response.status_code in [401, 403]


class TestPerformanceImprovement:
    """üìä –¢–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_workstations_list_performance(self, admin_token):
        """‚úÖ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ —Ä–∞–±–æ—Ç—ã —Å manager'–∞–º–∏)
        start = time.time()
        response1 = client.get(
            "/api/workstations",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        time1 = (time.time() - start) * 1000  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        
        assert response1.status_code == 200
        data1 = response1.json()
        assert isinstance(data1, list)
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä—è –ª–æ–≥–∏–∫–µ)
        start = time.time()
        response2 = client.get(
            "/api/workstations",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        time2 = (time.time() - start) * 1000
        
        assert response2.status_code == 200
        
        # –û–±–∞ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º–∏ (< 1 —Å–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        assert time1 < 1000, f"First request too slow: {time1}ms"
        assert time2 < 1000, f"Second request too slow: {time2}ms"
    
    def test_cache_hit_rate_improves(self):
        """‚úÖ Hit rate –∫—ç—à–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        _cache.reset_stats()
        _cache.clear()
        
        # –°–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        for i in range(5):
            _cache.set("perf_test_key", f"value_{i}", 300)
            result = _cache.get("perf_test_key")
        
        stats = _cache.get_stats()
        assert stats["hits"] > 0, "Should have cache hits"
        assert stats["hit_rate_percent"] > 0, "Hit rate should be > 0%"


class TestCacheInvalidation:
    """üîÑ –¢–µ—Å—Ç—ã –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞"""
    
    def test_cache_invalidation_after_workstation_creation(self, admin_token):
        """‚úÖ –ö—ç—à –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–π —Å—Ç–∞–Ω—Ü–∏–∏"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        _cache.reset_stats()
        _cache.clear()
        
        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö —Å—Ç–∞–Ω—Ü–∏–π (–∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫—ç—à)
        resp1 = client.get(
            "/api/workstations",
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        assert resp1.status_code == 200
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_before = _cache.get_stats()
        
        # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å—Ç–∞–Ω—Ü–∏—é
        new_ws_data = {
            "name": f"cache_test_ws_{int(time.time())}",
            "host": "192.168.1.99",
            "port": 5985,
            "username": "admin",
            "password": "test123"
        }
        
        create_resp = client.post(
            "/api/workstations",
            json=new_ws_data,
            headers={"Authorization": f"Bearer {admin_token}"}
        )
        
        # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω
        # (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ –ª–æ–≥–∞–º –∏–ª–∏ –ø—Ä—è–º–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–∞)
        assert create_resp.status_code in [201, 400]  # 201 –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, 400 –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è


class TestCacheEdgeCases:
    """‚ö†Ô∏è –¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def test_cache_expiration(self):
        """‚úÖ –ö—ç—à –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ TTL"""
        _cache.clear()
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–æ–π TTL
        _cache.set("expire_test", "value", ttl_seconds=1)
        assert _cache.get("expire_test") == "value"
        
        # –ü–æ–¥–æ–∂–¥–∞—Ç—å –∏—Å—Ç–µ—á–µ–Ω–∏–µ
        time.sleep(1.1)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å—Ç–µ—á—å
        assert _cache.get("expire_test") is None
    
    def test_cache_empty_pattern_invalidate(self, admin_token):
        """‚úÖ –ü—É—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è"""
        if not admin_token:
            pytest.skip("Admin token not available")
        
        response = client.post(
            "/api/performance/cache-invalidate",
            headers={"Authorization": f"Bearer {admin_token}"},
            params={"pattern": ""}
        )
        assert response.status_code == 400
    
    def test_cache_concurrent_access(self):
        """‚úÖ –ö—ç—à –±–µ–∑–æ–ø–∞—Å–µ–Ω –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""
        import threading
        
        _cache.clear()
        results = []
        
        def set_and_get(key, value):
            _cache.set(key, value, 300)
            result = _cache.get(key)
            results.append(result == value)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
        threads = [
            threading.Thread(target=set_and_get, args=(f"thread_key_{i}", f"value_{i}"))
            for i in range(10)
        ]
        
        for t in threads:
            t.start()
        for t in threads:
            t.join()
        
        # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã
        assert all(results), "All concurrent operations should succeed"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
